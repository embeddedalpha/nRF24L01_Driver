
NRF24L01_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003038  08003038  00004038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003048  08003048  00005004  2**0
                  CONTENTS
  4 .ARM          00000000  08003048  08003048  00005004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003048  08003048  00005004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003048  08003048  00004048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800304c  0800304c  0000404c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08003050  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005004  2**0
                  CONTENTS
 10 .bss          00000124  20000004  20000004  00005004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00005004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000096b1  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f74  00000000  00000000  0000e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000280  00000000  00000000  0000f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001c5  00000000  00000000  0000f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a627  00000000  00000000  0000faa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005ede  00000000  00000000  0002a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f242  00000000  00000000  0002ffaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bf1ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b14  00000000  00000000  000bf230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  000bfd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003020 	.word	0x08003020

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003020 	.word	0x08003020

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2lz>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	460d      	mov	r5, r1
 8000ace:	f7ff ffa9 	bl	8000a24 <__aeabi_dcmplt>
 8000ad2:	b928      	cbnz	r0, 8000ae0 <__aeabi_d2lz+0x1c>
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000adc:	f000 b80a 	b.w	8000af4 <__aeabi_d2ulz>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ae6:	f000 f805 	bl	8000af4 <__aeabi_d2ulz>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2ulz>:
 8000af4:	b5d0      	push	{r4, r6, r7, lr}
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__aeabi_d2ulz+0x34>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4606      	mov	r6, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	f7ff fd1f 	bl	8000540 <__aeabi_dmul>
 8000b02:	f000 f815 	bl	8000b30 <__aeabi_d2uiz>
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fca0 	bl	800044c <__aeabi_ui2d>
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <__aeabi_d2ulz+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f7ff fd16 	bl	8000540 <__aeabi_dmul>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4630      	mov	r0, r6
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	f7ff fb58 	bl	80001d0 <__aeabi_dsub>
 8000b20:	f000 f806 	bl	8000b30 <__aeabi_d2uiz>
 8000b24:	4621      	mov	r1, r4
 8000b26:	bdd0      	pop	{r4, r6, r7, pc}
 8000b28:	3df00000 	.word	0x3df00000
 8000b2c:	41f00000 	.word	0x41f00000

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 8000b7a:	480e      	ldr	r0, [pc, #56]	@ (8000bb4 <Console_Init+0x44>)
 8000b7c:	f001 fbe1 	bl	8002342 <USART_Config_Reset>
	 serial.Port = USART1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <Console_Init+0x44>)
 8000b82:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <Console_Init+0x48>)
 8000b84:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <Console_Init+0x44>)
 8000b8a:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <Console_Init+0x44>)
 8000b90:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <Console_Init+0x44>)
 8000b98:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <Console_Init+0x44>)
 8000b9e:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <Console_Init+0x44>)
 8000ba4:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8000ba6:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <Console_Init+0x44>)
 8000ba8:	f002 f8ea 	bl	8002d80 <USART_Init>


}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000020 	.word	0x20000020
 8000bb8:	40011000 	.word	0x40011000

08000bbc <DMA_Clock_Enable>:

#include "DMA.h"


void DMA_Clock_Enable(DMA_Config *config)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	if(config->controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <DMA_Clock_Enable+0x40>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d105      	bne.n	8000bda <DMA_Clock_Enable+0x1e>
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config->controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <DMA_Clock_Enable+0x48>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d105      	bne.n	8000bf0 <DMA_Clock_Enable+0x34>
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40026000 	.word	0x40026000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40026400 	.word	0x40026400

08000c08 <DMA_Init>:
	if(config->controller == DMA2) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA2RST;
}
//

void DMA_Init(DMA_Config *config)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffd3 	bl	8000bbc <DMA_Clock_Enable>
	config -> stream -> CR |= config -> channel << DMA_SxCR_CHSEL_Pos;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	065a      	lsls	r2, r3, #25
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> circular_mode;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	6819      	ldr	r1, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> flow_control;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> priority_level;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695a      	ldr	r2, [r3, #20]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_data_size;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_data_size;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699a      	ldr	r2, [r3, #24]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> transfer_direction;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	6819      	ldr	r1, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> interrupts;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= DMA_SxCR_MINC;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <__NVIC_EnableIRQ>:
//    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
//  }
//}

__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4907      	ldr	r1, [pc, #28]	@ (8000cf8 <__NVIC_EnableIRQ+0x38>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	@ (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <GPIO_Interrupt_Setup>:
#include "GPIO.h"



void GPIO_Interrupt_Setup(int pin, int edge_select, uint32_t priority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
	EXTI ->IMR |= 1 << pin;
 8000d5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4a48      	ldr	r2, [pc, #288]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6013      	str	r3, [r2, #0]
	switch (edge_select) {
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d01f      	beq.n	8000db6 <GPIO_Interrupt_Setup+0x66>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	dc31      	bgt.n	8000de0 <GPIO_Interrupt_Setup+0x90>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <GPIO_Interrupt_Setup+0x3a>
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d00b      	beq.n	8000da0 <GPIO_Interrupt_Setup+0x50>
 8000d88:	e02a      	b.n	8000de0 <GPIO_Interrupt_Setup+0x90>
		case 0:
			EXTI ->RTSR |= 1 << pin;
 8000d8a:	4b40      	ldr	r3, [pc, #256]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	4611      	mov	r1, r2
 8000d98:	4a3c      	ldr	r2, [pc, #240]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	6093      	str	r3, [r2, #8]
			break;
 8000d9e:	e01f      	b.n	8000de0 <GPIO_Interrupt_Setup+0x90>
		case 1:
			EXTI ->FTSR |= 1 << pin;
 8000da0:	4b3a      	ldr	r3, [pc, #232]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	2101      	movs	r1, #1
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dac:	4611      	mov	r1, r2
 8000dae:	4a37      	ldr	r2, [pc, #220]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000db0:	430b      	orrs	r3, r1
 8000db2:	60d3      	str	r3, [r2, #12]
			break;
 8000db4:	e014      	b.n	8000de0 <GPIO_Interrupt_Setup+0x90>
		case 2:
			EXTI ->RTSR |= 1 << pin;
 8000db6:	4b35      	ldr	r3, [pc, #212]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2101      	movs	r1, #1
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000dc6:	430b      	orrs	r3, r1
 8000dc8:	6093      	str	r3, [r2, #8]
			EXTI ->FTSR |= 1 << pin;
 8000dca:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e8c <GPIO_Interrupt_Setup+0x13c>)
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	60d3      	str	r3, [r2, #12]
			break;
 8000dde:	bf00      	nop
	}

	if(pin == 0)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d107      	bne.n	8000df6 <GPIO_Interrupt_Setup+0xa6>
	{
		NVIC_SetPriority(EXTI0_IRQn,priority);
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	2006      	movs	r0, #6
 8000dea:	f7ff ff87 	bl	8000cfc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI0_IRQn);
 8000dee:	2006      	movs	r0, #6
 8000df0:	f7ff ff66 	bl	8000cc0 <__NVIC_EnableIRQ>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
	}



}
 8000df4:	e046      	b.n	8000e84 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 1)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d107      	bne.n	8000e0c <GPIO_Interrupt_Setup+0xbc>
		NVIC_SetPriority(EXTI1_IRQn,priority);
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	2007      	movs	r0, #7
 8000e00:	f7ff ff7c 	bl	8000cfc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI1_IRQn);
 8000e04:	2007      	movs	r0, #7
 8000e06:	f7ff ff5b 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e0a:	e03b      	b.n	8000e84 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 2)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d107      	bne.n	8000e22 <GPIO_Interrupt_Setup+0xd2>
		NVIC_SetPriority(EXTI2_IRQn,priority);
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	2008      	movs	r0, #8
 8000e16:	f7ff ff71 	bl	8000cfc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI2_IRQn);
 8000e1a:	2008      	movs	r0, #8
 8000e1c:	f7ff ff50 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e20:	e030      	b.n	8000e84 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 3)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d107      	bne.n	8000e38 <GPIO_Interrupt_Setup+0xe8>
		NVIC_SetPriority(EXTI3_IRQn,priority);
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	2009      	movs	r0, #9
 8000e2c:	f7ff ff66 	bl	8000cfc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI3_IRQn);
 8000e30:	2009      	movs	r0, #9
 8000e32:	f7ff ff45 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e36:	e025      	b.n	8000e84 <GPIO_Interrupt_Setup+0x134>
	else if(pin == 4)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d107      	bne.n	8000e4e <GPIO_Interrupt_Setup+0xfe>
		NVIC_SetPriority(EXTI4_IRQn,priority);
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	200a      	movs	r0, #10
 8000e42:	f7ff ff5b 	bl	8000cfc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI4_IRQn);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f7ff ff3a 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e4c:	e01a      	b.n	8000e84 <GPIO_Interrupt_Setup+0x134>
	else if(pin >= 5 || pin <= 9)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	dc02      	bgt.n	8000e5a <GPIO_Interrupt_Setup+0x10a>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b09      	cmp	r3, #9
 8000e58:	dc07      	bgt.n	8000e6a <GPIO_Interrupt_Setup+0x11a>
		NVIC_SetPriority(EXTI9_5_IRQn,priority);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	2017      	movs	r0, #23
 8000e5e:	f7ff ff4d 	bl	8000cfc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e62:	2017      	movs	r0, #23
 8000e64:	f7ff ff2c 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e68:	e00c      	b.n	8000e84 <GPIO_Interrupt_Setup+0x134>
	else if(pin >= 10 || pin <= 15)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2b09      	cmp	r3, #9
 8000e6e:	dc02      	bgt.n	8000e76 <GPIO_Interrupt_Setup+0x126>
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	dc06      	bgt.n	8000e84 <GPIO_Interrupt_Setup+0x134>
		NVIC_SetPriority(EXTI15_10_IRQn,priority);
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2028      	movs	r0, #40	@ 0x28
 8000e7a:	f7ff ff3f 	bl	8000cfc <__NVIC_SetPriority>
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7e:	2028      	movs	r0, #40	@ 0x28
 8000e80:	f7ff ff1e 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40013c00 	.word	0x40013c00

08000e90 <GPIO_Pin_High>:

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	Port -> BSRR = 1 << pin;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	619a      	str	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
	Port -> BSRR = (1 << (pin+16));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	3310      	adds	r3, #16
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a25      	ldr	r2, [pc, #148]	@ (8000f7c <GPIO_Clock_Enable+0xa0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d106      	bne.n	8000efa <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	4a23      	ldr	r2, [pc, #140]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef8:	e039      	b.n	8000f6e <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <GPIO_Clock_Enable+0xa8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d106      	bne.n	8000f10 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a1e      	ldr	r2, [pc, #120]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	e02e      	b.n	8000f6e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a1d      	ldr	r2, [pc, #116]	@ (8000f88 <GPIO_Clock_Enable+0xac>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d106      	bne.n	8000f26 <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8000f18:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1c:	4a18      	ldr	r2, [pc, #96]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f24:	e023      	b.n	8000f6e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a18      	ldr	r2, [pc, #96]	@ (8000f8c <GPIO_Clock_Enable+0xb0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d106      	bne.n	8000f3c <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	e018      	b.n	8000f6e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <GPIO_Clock_Enable+0xb4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d106      	bne.n	8000f52 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f4a:	f043 0310 	orr.w	r3, r3, #16
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f50:	e00d      	b.n	8000f6e <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a0f      	ldr	r2, [pc, #60]	@ (8000f94 <GPIO_Clock_Enable+0xb8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d106      	bne.n	8000f68 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <GPIO_Clock_Enable+0xa4>)
 8000f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	e002      	b.n	8000f6e <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6c:	e000      	b.n	8000f70 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021c00 	.word	0x40021c00

08000f98 <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	70fb      	strb	r3, [r7, #3]
 8000faa:	460b      	mov	r3, r1
 8000fac:	70bb      	strb	r3, [r7, #2]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff92 	bl	8000edc <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	78b9      	ldrb	r1, [r7, #2]
 8000fbe:	78fa      	ldrb	r2, [r7, #3]
 8000fc0:	0052      	lsls	r2, r2, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	7879      	ldrb	r1, [r7, #1]
 8000fd2:	78fa      	ldrb	r2, [r7, #3]
 8000fd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	7c39      	ldrb	r1, [r7, #16]
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	0052      	lsls	r2, r2, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	7d39      	ldrb	r1, [r7, #20]
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	0052      	lsls	r2, r2, #1
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	431a      	orrs	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d80a      	bhi.n	8001022 <GPIO_Pin_Init+0x8a>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	7e39      	ldrb	r1, [r7, #24]
 8001012:	78fa      	ldrb	r2, [r7, #3]
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001020:	e00a      	b.n	8001038 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	7e39      	ldrb	r1, [r7, #24]
 8001028:	78fa      	ldrb	r2, [r7, #3]
 800102a:	3a08      	subs	r2, #8
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <write_register>:
	SPI_NSS_High(&nrf24_spi);
	return temp;
}

static void write_register(uint8_t reg, uint8_t data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	460a      	mov	r2, r1
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	4613      	mov	r3, r2
 800104e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
	SPI_NSS_Low(&nrf24_spi);
 8001054:	480e      	ldr	r0, [pc, #56]	@ (8001090 <write_register+0x50>)
 8001056:	f000 ff66 	bl	8001f26 <SPI_NSS_Low>
	temp = SPI_TRX_Byte(&nrf24_spi, reg & WRITE_COMMAND);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	b29b      	uxth	r3, r3
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	b29b      	uxth	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	480a      	ldr	r0, [pc, #40]	@ (8001090 <write_register+0x50>)
 8001068:	f000 ff14 	bl	8001e94 <SPI_TRX_Byte>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
	temp = SPI_TRX_Byte(&nrf24_spi, data);
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	b29b      	uxth	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <write_register+0x50>)
 8001078:	f000 ff0c 	bl	8001e94 <SPI_TRX_Byte>
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
	SPI_NSS_High(&nrf24_spi);
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <write_register+0x50>)
 8001082:	f000 ff40 	bl	8001f06 <SPI_NSS_High>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000038 	.word	0x20000038

08001094 <NRF24L01_Init>:
}



int8_t NRF24L01_Init(NRF24L01_Config *config)
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b087      	sub	sp, #28
 8001098:	af04      	add	r7, sp, #16
 800109a:	6078      	str	r0, [r7, #4]


	nrf24_spi = config->NRF24L01_SPI_Driver;
 800109c:	4a41      	ldr	r2, [pc, #260]	@ (80011a4 <NRF24L01_Init+0x110>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4614      	mov	r4, r2
 80010a2:	461d      	mov	r5, r3
 80010a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010b0:	e884 0003 	stmia.w	r4, {r0, r1}

	SPI_Init(&config->NRF24L01_SPI_Driver);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fd3c 	bl	8001b34 <SPI_Init>
	SPI_Enable(&config->NRF24L01_SPI_Driver);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fed6 	bl	8001e70 <SPI_Enable>

	if(config->Interrupt_Enable)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d019      	beq.n	8001102 <NRF24L01_Init+0x6e>
	{
		GPIO_Pin_Init(config->Interrupt_Port, config->Interrupt_Pin, MODE.Input, Output_Type.Open_Drain, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 1034 	ldrb.w	r1, [r3, #52]	@ 0x34
 80010d8:	2500      	movs	r5, #0
 80010da:	2601      	movs	r6, #1
 80010dc:	2303      	movs	r3, #3
 80010de:	2200      	movs	r2, #0
 80010e0:	2400      	movs	r4, #0
 80010e2:	9402      	str	r4, [sp, #8]
 80010e4:	9201      	str	r2, [sp, #4]
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4633      	mov	r3, r6
 80010ea:	462a      	mov	r2, r5
 80010ec:	f7ff ff54 	bl	8000f98 <GPIO_Pin_Init>
		GPIO_Interrupt_Setup(config->Interrupt_Pin, Interrupt_Edge.RISING_EDGE , 0);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80010f6:	2200      	movs	r2, #0
 80010f8:	4611      	mov	r1, r2
 80010fa:	2200      	movs	r2, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe27 	bl	8000d50 <GPIO_Interrupt_Setup>
	}



	write_register(NRF24L01_Reg.CONFIG.REGISTER, NRF24L01_Reg.CONFIG.PWR_UP.POWER_DOWN);
 8001102:	2300      	movs	r3, #0
 8001104:	2200      	movs	r2, #0
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff99 	bl	8001040 <write_register>
	write_register(NRF24L01_Reg.RF_SETUP.REGISTER, NRF24L01_Reg.RF_SETUP.RF_PWR.POWER_NEG18DBM);
 800110e:	2306      	movs	r3, #6
 8001110:	2200      	movs	r2, #0
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff93 	bl	8001040 <write_register>
	write_register(NRF24L01_Reg.RF_SETUP.REGISTER, NRF24L01_Reg.RF_SETUP.RF_DR_LOW.PLL_LOCK);
 800111a:	2306      	movs	r3, #6
 800111c:	2210      	movs	r2, #16
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff8d 	bl	8001040 <write_register>
	write_register(NRF24L01_Reg.SETUP_RETR.REGISTER, NRF24L01_Reg.SETUP_RETR.SETUP_RTR.ARC);
 8001126:	2304      	movs	r3, #4
 8001128:	2203      	movs	r2, #3
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff87 	bl	8001040 <write_register>

	switch (config->Address_Length) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001138:	2b05      	cmp	r3, #5
 800113a:	d014      	beq.n	8001166 <NRF24L01_Init+0xd2>
 800113c:	2b05      	cmp	r3, #5
 800113e:	dc19      	bgt.n	8001174 <NRF24L01_Init+0xe0>
 8001140:	2b03      	cmp	r3, #3
 8001142:	d002      	beq.n	800114a <NRF24L01_Init+0xb6>
 8001144:	2b04      	cmp	r3, #4
 8001146:	d007      	beq.n	8001158 <NRF24L01_Init+0xc4>
 8001148:	e014      	b.n	8001174 <NRF24L01_Init+0xe0>
		case 3:
		{
			write_register(NRF24L01_Reg.SETUP_AW.REGISTER, NRF24L01_Reg.SETUP_AW.AW.Byte_3);
 800114a:	2307      	movs	r3, #7
 800114c:	2202      	movs	r2, #2
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff75 	bl	8001040 <write_register>
		}
			break;
 8001156:	e014      	b.n	8001182 <NRF24L01_Init+0xee>

		case 4:
		{
			write_register(NRF24L01_Reg.SETUP_AW.REGISTER, NRF24L01_Reg.SETUP_AW.AW.Byte_4);
 8001158:	2307      	movs	r3, #7
 800115a:	2220      	movs	r2, #32
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff6e 	bl	8001040 <write_register>
		}
			break;
 8001164:	e00d      	b.n	8001182 <NRF24L01_Init+0xee>
		case 5:
		{
			write_register(NRF24L01_Reg.SETUP_AW.REGISTER, NRF24L01_Reg.SETUP_AW.AW.Byte_5);
 8001166:	2307      	movs	r3, #7
 8001168:	2260      	movs	r2, #96	@ 0x60
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff67 	bl	8001040 <write_register>
		}
			break;
 8001172:	e006      	b.n	8001182 <NRF24L01_Init+0xee>
		default:
		{
			write_register(NRF24L01_Reg.SETUP_AW.REGISTER, NRF24L01_Reg.SETUP_AW.AW.Byte_5);
 8001174:	2307      	movs	r3, #7
 8001176:	2260      	movs	r2, #96	@ 0x60
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff60 	bl	8001040 <write_register>
		}
			break;
 8001180:	bf00      	nop
	}


	write_register(NRF24L01_Reg.FEATURE.REGISTER, NRF24L01_Reg.FEATURE.EN_DPL);
 8001182:	231d      	movs	r3, #29
 8001184:	2200      	movs	r2, #0
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff59 	bl	8001040 <write_register>
	write_register(NRF24L01_Reg.DYNPD.REGISTER, NRF24L01_Reg.DYNPD.DPL_P0);
 800118e:	231c      	movs	r3, #28
 8001190:	2200      	movs	r2, #0
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff53 	bl	8001040 <write_register>

	return 1;
 800119a:	2301      	movs	r3, #1

}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011a4:	20000038 	.word	0x20000038

080011a8 <SPI_Clock_Enable>:

DMA_Config xDMA_TX;
DMA_Config xDMA_RX;

int8_t SPI_Clock_Enable(SPI_Config *config)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a14      	ldr	r2, [pc, #80]	@ (800120c <SPI_Clock_Enable+0x64>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d105      	bne.n	80011ca <SPI_Clock_Enable+0x22>
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <SPI_Clock_Enable+0x68>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <SPI_Clock_Enable+0x68>)
 80011c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011c8:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <SPI_Clock_Enable+0x6c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d105      	bne.n	80011e0 <SPI_Clock_Enable+0x38>
 80011d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <SPI_Clock_Enable+0x68>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001210 <SPI_Clock_Enable+0x68>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <SPI_Clock_Enable+0x70>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d106      	bne.n	80011f8 <SPI_Clock_Enable+0x50>
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <SPI_Clock_Enable+0x68>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <SPI_Clock_Enable+0x68>)
 80011f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f6:	e001      	b.n	80011fc <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 80011f8:	23ff      	movs	r3, #255	@ 0xff
 80011fa:	73fb      	strb	r3, [r7, #15]
	return retval;
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40013000 	.word	0x40013000
 8001210:	40023800 	.word	0x40023800
 8001214:	40003800 	.word	0x40003800
 8001218:	40003c00 	.word	0x40003c00

0800121c <SPI_Config_Reset>:
	return retval;
}


int8_t SPI_Config_Reset(SPI_Config *config)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2RSTR |= RCC_APB2RSTR_SPI1RST;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a29      	ldr	r2, [pc, #164]	@ (80012d4 <SPI_Config_Reset+0xb8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d105      	bne.n	800123e <SPI_Config_Reset+0x22>
 8001232:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <SPI_Config_Reset+0xbc>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	4a28      	ldr	r2, [pc, #160]	@ (80012d8 <SPI_Config_Reset+0xbc>)
 8001238:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800123c:	6253      	str	r3, [r2, #36]	@ 0x24
	if(config ->Port == SPI2)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a26      	ldr	r2, [pc, #152]	@ (80012dc <SPI_Config_Reset+0xc0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d105      	bne.n	8001254 <SPI_Config_Reset+0x38>
 8001248:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <SPI_Config_Reset+0xbc>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	4a22      	ldr	r2, [pc, #136]	@ (80012d8 <SPI_Config_Reset+0xbc>)
 800124e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001252:	6213      	str	r3, [r2, #32]
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <SPI_Config_Reset+0xc4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d106      	bne.n	800126c <SPI_Config_Reset+0x50>
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <SPI_Config_Reset+0xbc>)
 8001260:	6a1b      	ldr	r3, [r3, #32]
 8001262:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <SPI_Config_Reset+0xbc>)
 8001264:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001268:	6213      	str	r3, [r2, #32]
 800126a:	e001      	b.n	8001270 <SPI_Config_Reset+0x54>
	else
		retval = -1;
 800126c:	23ff      	movs	r3, #255	@ 0xff
 800126e:	73fb      	strb	r3, [r7, #15]

	config->NSS_Port = GPIOA;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <SPI_Config_Reset+0xc8>)
 8001274:	609a      	str	r2, [r3, #8]
	config->NSS_Pin = 4;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2204      	movs	r2, #4
 800127a:	731a      	strb	r2, [r3, #12]
	config->clock_phase = SPI_Clock_Phase.High_1;
 800127c:	2201      	movs	r2, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	839a      	strh	r2, [r3, #28]
	config->clock_polarity = SPI_Clock_Polarity.High_1;
 8001282:	2202      	movs	r2, #2
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	835a      	strh	r2, [r3, #26]
	config->mode = SPI_Mode.Full_Duplex_Master;
 8001288:	2300      	movs	r3, #0
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	81da      	strh	r2, [r3, #14]
	config->crc = SPI_CRC.Disable;
 8001290:	2200      	movs	r2, #0
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	821a      	strh	r2, [r3, #16]
	config->data_format = SPI_Data_Format.Bit8;
 8001296:	2200      	movs	r2, #0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	825a      	strh	r2, [r3, #18]
	config->frame_format = SPI_Frame_Format.MSB_First;
 800129c:	2200      	movs	r2, #0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	829a      	strh	r2, [r3, #20]
	config->dma = SPI_DMA.TX_DMA_Disable | SPI_DMA.RX_DMA_Disable;
 80012a2:	2200      	movs	r2, #0
 80012a4:	2300      	movs	r3, #0
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	461a      	mov	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	841a      	strh	r2, [r3, #32]
	config->interrupt = SPI_Interrupt.Disable;
 80012b0:	2300      	movs	r3, #0
 80012b2:	461a      	mov	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	83da      	strh	r2, [r3, #30]
	config->type = SPI_Type.Master;
 80012b8:	2204      	movs	r2, #4
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	831a      	strh	r2, [r3, #24]
	config->prescaler = SPI_Prescaler.CLK_div_16;
 80012be:	2203      	movs	r2, #3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	82da      	strh	r2, [r3, #22]

	return retval;
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40013000 	.word	0x40013000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40003800 	.word	0x40003800
 80012e0:	40003c00 	.word	0x40003c00
 80012e4:	40020000 	.word	0x40020000

080012e8 <SPI_Pin>:


static void SPI_Pin(SPI_Config *config)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af04      	add	r7, sp, #16
 80012ee:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4aaa      	ldr	r2, [pc, #680]	@ (80015a0 <SPI_Pin+0x2b8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	f040 8158 	bne.w	80015ac <SPI_Pin+0x2c4>
	{
		if(config->mode == 0)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	89db      	ldrh	r3, [r3, #14]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 8081 	bne.w	8001408 <SPI_Pin+0x120>
		{
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	791b      	ldrb	r3, [r3, #4]
 800130a:	461a      	mov	r2, r3
 800130c:	230f      	movs	r3, #15
 800130e:	429a      	cmp	r2, r3
 8001310:	d10d      	bne.n	800132e <SPI_Pin+0x46>
 8001312:	2002      	movs	r0, #2
 8001314:	2400      	movs	r4, #0
 8001316:	2303      	movs	r3, #3
 8001318:	2200      	movs	r2, #0
 800131a:	2105      	movs	r1, #5
 800131c:	9102      	str	r1, [sp, #8]
 800131e:	9201      	str	r2, [sp, #4]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4623      	mov	r3, r4
 8001324:	4602      	mov	r2, r0
 8001326:	2105      	movs	r1, #5
 8001328:	489e      	ldr	r0, [pc, #632]	@ (80015a4 <SPI_Pin+0x2bc>)
 800132a:	f7ff fe35 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	791b      	ldrb	r3, [r3, #4]
 8001332:	461a      	mov	r2, r3
 8001334:	2317      	movs	r3, #23
 8001336:	429a      	cmp	r2, r3
 8001338:	d10d      	bne.n	8001356 <SPI_Pin+0x6e>
 800133a:	2002      	movs	r0, #2
 800133c:	2400      	movs	r4, #0
 800133e:	2303      	movs	r3, #3
 8001340:	2200      	movs	r2, #0
 8001342:	2105      	movs	r1, #5
 8001344:	9102      	str	r1, [sp, #8]
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4623      	mov	r3, r4
 800134c:	4602      	mov	r2, r0
 800134e:	2103      	movs	r1, #3
 8001350:	4895      	ldr	r0, [pc, #596]	@ (80015a8 <SPI_Pin+0x2c0>)
 8001352:	f7ff fe21 	bl	8000f98 <GPIO_Pin_Init>

			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	799b      	ldrb	r3, [r3, #6]
 800135a:	461a      	mov	r2, r3
 800135c:	2310      	movs	r3, #16
 800135e:	429a      	cmp	r2, r3
 8001360:	d10d      	bne.n	800137e <SPI_Pin+0x96>
 8001362:	2002      	movs	r0, #2
 8001364:	2400      	movs	r4, #0
 8001366:	2303      	movs	r3, #3
 8001368:	2200      	movs	r2, #0
 800136a:	2105      	movs	r1, #5
 800136c:	9102      	str	r1, [sp, #8]
 800136e:	9201      	str	r2, [sp, #4]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4623      	mov	r3, r4
 8001374:	4602      	mov	r2, r0
 8001376:	2106      	movs	r1, #6
 8001378:	488a      	ldr	r0, [pc, #552]	@ (80015a4 <SPI_Pin+0x2bc>)
 800137a:	f7ff fe0d 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	799b      	ldrb	r3, [r3, #6]
 8001382:	461a      	mov	r2, r3
 8001384:	2318      	movs	r3, #24
 8001386:	429a      	cmp	r2, r3
 8001388:	d10d      	bne.n	80013a6 <SPI_Pin+0xbe>
 800138a:	2002      	movs	r0, #2
 800138c:	2400      	movs	r4, #0
 800138e:	2303      	movs	r3, #3
 8001390:	2200      	movs	r2, #0
 8001392:	2105      	movs	r1, #5
 8001394:	9102      	str	r1, [sp, #8]
 8001396:	9201      	str	r2, [sp, #4]
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4623      	mov	r3, r4
 800139c:	4602      	mov	r2, r0
 800139e:	2104      	movs	r1, #4
 80013a0:	4881      	ldr	r0, [pc, #516]	@ (80015a8 <SPI_Pin+0x2c0>)
 80013a2:	f7ff fdf9 	bl	8000f98 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	795b      	ldrb	r3, [r3, #5]
 80013aa:	461a      	mov	r2, r3
 80013ac:	2311      	movs	r3, #17
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d10d      	bne.n	80013ce <SPI_Pin+0xe6>
 80013b2:	2002      	movs	r0, #2
 80013b4:	2400      	movs	r4, #0
 80013b6:	2303      	movs	r3, #3
 80013b8:	2200      	movs	r2, #0
 80013ba:	2105      	movs	r1, #5
 80013bc:	9102      	str	r1, [sp, #8]
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4623      	mov	r3, r4
 80013c4:	4602      	mov	r2, r0
 80013c6:	2107      	movs	r1, #7
 80013c8:	4876      	ldr	r0, [pc, #472]	@ (80015a4 <SPI_Pin+0x2bc>)
 80013ca:	f7ff fde5 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	795b      	ldrb	r3, [r3, #5]
 80013d2:	461a      	mov	r2, r3
 80013d4:	2319      	movs	r3, #25
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d10d      	bne.n	80013f6 <SPI_Pin+0x10e>
 80013da:	2002      	movs	r0, #2
 80013dc:	2400      	movs	r4, #0
 80013de:	2303      	movs	r3, #3
 80013e0:	2200      	movs	r2, #0
 80013e2:	2105      	movs	r1, #5
 80013e4:	9102      	str	r1, [sp, #8]
 80013e6:	9201      	str	r2, [sp, #4]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4623      	mov	r3, r4
 80013ec:	4602      	mov	r2, r0
 80013ee:	2105      	movs	r1, #5
 80013f0:	486d      	ldr	r0, [pc, #436]	@ (80015a8 <SPI_Pin+0x2c0>)
 80013f2:	f7ff fdd1 	bl	8000f98 <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001404:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 8001406:	e38b      	b.n	8001b20 <SPI_Pin+0x838>
		else if(config->mode == 1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	89db      	ldrh	r3, [r3, #14]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d160      	bne.n	80014d2 <SPI_Pin+0x1ea>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	461a      	mov	r2, r3
 8001416:	230f      	movs	r3, #15
 8001418:	429a      	cmp	r2, r3
 800141a:	d10d      	bne.n	8001438 <SPI_Pin+0x150>
 800141c:	2002      	movs	r0, #2
 800141e:	2400      	movs	r4, #0
 8001420:	2303      	movs	r3, #3
 8001422:	2200      	movs	r2, #0
 8001424:	2105      	movs	r1, #5
 8001426:	9102      	str	r1, [sp, #8]
 8001428:	9201      	str	r2, [sp, #4]
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4623      	mov	r3, r4
 800142e:	4602      	mov	r2, r0
 8001430:	2105      	movs	r1, #5
 8001432:	485c      	ldr	r0, [pc, #368]	@ (80015a4 <SPI_Pin+0x2bc>)
 8001434:	f7ff fdb0 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	461a      	mov	r2, r3
 800143e:	2317      	movs	r3, #23
 8001440:	429a      	cmp	r2, r3
 8001442:	d10d      	bne.n	8001460 <SPI_Pin+0x178>
 8001444:	2002      	movs	r0, #2
 8001446:	2400      	movs	r4, #0
 8001448:	2303      	movs	r3, #3
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	9102      	str	r1, [sp, #8]
 8001450:	9201      	str	r2, [sp, #4]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	4623      	mov	r3, r4
 8001456:	4602      	mov	r2, r0
 8001458:	2103      	movs	r1, #3
 800145a:	4853      	ldr	r0, [pc, #332]	@ (80015a8 <SPI_Pin+0x2c0>)
 800145c:	f7ff fd9c 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	795b      	ldrb	r3, [r3, #5]
 8001464:	461a      	mov	r2, r3
 8001466:	2311      	movs	r3, #17
 8001468:	429a      	cmp	r2, r3
 800146a:	d10d      	bne.n	8001488 <SPI_Pin+0x1a0>
 800146c:	2002      	movs	r0, #2
 800146e:	2400      	movs	r4, #0
 8001470:	2303      	movs	r3, #3
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	9102      	str	r1, [sp, #8]
 8001478:	9201      	str	r2, [sp, #4]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4623      	mov	r3, r4
 800147e:	4602      	mov	r2, r0
 8001480:	2107      	movs	r1, #7
 8001482:	4848      	ldr	r0, [pc, #288]	@ (80015a4 <SPI_Pin+0x2bc>)
 8001484:	f7ff fd88 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	795b      	ldrb	r3, [r3, #5]
 800148c:	461a      	mov	r2, r3
 800148e:	2319      	movs	r3, #25
 8001490:	429a      	cmp	r2, r3
 8001492:	d10d      	bne.n	80014b0 <SPI_Pin+0x1c8>
 8001494:	2002      	movs	r0, #2
 8001496:	2400      	movs	r4, #0
 8001498:	2303      	movs	r3, #3
 800149a:	2200      	movs	r2, #0
 800149c:	2105      	movs	r1, #5
 800149e:	9102      	str	r1, [sp, #8]
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4623      	mov	r3, r4
 80014a6:	4602      	mov	r2, r0
 80014a8:	2105      	movs	r1, #5
 80014aa:	483f      	ldr	r0, [pc, #252]	@ (80015a8 <SPI_Pin+0x2c0>)
 80014ac:	f7ff fd74 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014be:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	e326      	b.n	8001b20 <SPI_Pin+0x838>
		else if(config->mode == 2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	89db      	ldrh	r3, [r3, #14]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f040 8322 	bne.w	8001b20 <SPI_Pin+0x838>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	791b      	ldrb	r3, [r3, #4]
 80014e0:	461a      	mov	r2, r3
 80014e2:	230f      	movs	r3, #15
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d10d      	bne.n	8001504 <SPI_Pin+0x21c>
 80014e8:	2002      	movs	r0, #2
 80014ea:	2400      	movs	r4, #0
 80014ec:	2303      	movs	r3, #3
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	9102      	str	r1, [sp, #8]
 80014f4:	9201      	str	r2, [sp, #4]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4623      	mov	r3, r4
 80014fa:	4602      	mov	r2, r0
 80014fc:	2105      	movs	r1, #5
 80014fe:	4829      	ldr	r0, [pc, #164]	@ (80015a4 <SPI_Pin+0x2bc>)
 8001500:	f7ff fd4a 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	461a      	mov	r2, r3
 800150a:	2317      	movs	r3, #23
 800150c:	429a      	cmp	r2, r3
 800150e:	d10d      	bne.n	800152c <SPI_Pin+0x244>
 8001510:	2002      	movs	r0, #2
 8001512:	2400      	movs	r4, #0
 8001514:	2303      	movs	r3, #3
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	9102      	str	r1, [sp, #8]
 800151c:	9201      	str	r2, [sp, #4]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4623      	mov	r3, r4
 8001522:	4602      	mov	r2, r0
 8001524:	2103      	movs	r1, #3
 8001526:	4820      	ldr	r0, [pc, #128]	@ (80015a8 <SPI_Pin+0x2c0>)
 8001528:	f7ff fd36 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	799b      	ldrb	r3, [r3, #6]
 8001530:	461a      	mov	r2, r3
 8001532:	2310      	movs	r3, #16
 8001534:	429a      	cmp	r2, r3
 8001536:	d10d      	bne.n	8001554 <SPI_Pin+0x26c>
 8001538:	2002      	movs	r0, #2
 800153a:	2400      	movs	r4, #0
 800153c:	2303      	movs	r3, #3
 800153e:	2200      	movs	r2, #0
 8001540:	2105      	movs	r1, #5
 8001542:	9102      	str	r1, [sp, #8]
 8001544:	9201      	str	r2, [sp, #4]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	4623      	mov	r3, r4
 800154a:	4602      	mov	r2, r0
 800154c:	2106      	movs	r1, #6
 800154e:	4815      	ldr	r0, [pc, #84]	@ (80015a4 <SPI_Pin+0x2bc>)
 8001550:	f7ff fd22 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	799b      	ldrb	r3, [r3, #6]
 8001558:	461a      	mov	r2, r3
 800155a:	2318      	movs	r3, #24
 800155c:	429a      	cmp	r2, r3
 800155e:	d10d      	bne.n	800157c <SPI_Pin+0x294>
 8001560:	2002      	movs	r0, #2
 8001562:	2400      	movs	r4, #0
 8001564:	2303      	movs	r3, #3
 8001566:	2200      	movs	r2, #0
 8001568:	2105      	movs	r1, #5
 800156a:	9102      	str	r1, [sp, #8]
 800156c:	9201      	str	r2, [sp, #4]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4623      	mov	r3, r4
 8001572:	4602      	mov	r2, r0
 8001574:	2104      	movs	r1, #4
 8001576:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <SPI_Pin+0x2c0>)
 8001578:	f7ff fd0e 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800158a:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800159a:	601a      	str	r2, [r3, #0]
}
 800159c:	e2c0      	b.n	8001b20 <SPI_Pin+0x838>
 800159e:	bf00      	nop
 80015a0:	40013000 	.word	0x40013000
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020400 	.word	0x40020400
	else if(config -> Port == SPI2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4aaa      	ldr	r2, [pc, #680]	@ (800185c <SPI_Pin+0x574>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	f040 8158 	bne.w	8001868 <SPI_Pin+0x580>
		if(config->mode == 0)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	89db      	ldrh	r3, [r3, #14]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 8081 	bne.w	80016c4 <SPI_Pin+0x3dc>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	791b      	ldrb	r3, [r3, #4]
 80015c6:	461a      	mov	r2, r3
 80015c8:	23d2      	movs	r3, #210	@ 0xd2
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d10d      	bne.n	80015ea <SPI_Pin+0x302>
 80015ce:	2002      	movs	r0, #2
 80015d0:	2400      	movs	r4, #0
 80015d2:	2303      	movs	r3, #3
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	9102      	str	r1, [sp, #8]
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	4623      	mov	r3, r4
 80015e0:	4602      	mov	r2, r0
 80015e2:	210a      	movs	r1, #10
 80015e4:	489e      	ldr	r0, [pc, #632]	@ (8001860 <SPI_Pin+0x578>)
 80015e6:	f7ff fcd7 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	461a      	mov	r2, r3
 80015f0:	23d5      	movs	r3, #213	@ 0xd5
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d10d      	bne.n	8001612 <SPI_Pin+0x32a>
 80015f6:	2002      	movs	r0, #2
 80015f8:	2400      	movs	r4, #0
 80015fa:	2303      	movs	r3, #3
 80015fc:	2200      	movs	r2, #0
 80015fe:	2105      	movs	r1, #5
 8001600:	9102      	str	r1, [sp, #8]
 8001602:	9201      	str	r2, [sp, #4]
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	4623      	mov	r3, r4
 8001608:	4602      	mov	r2, r0
 800160a:	210d      	movs	r1, #13
 800160c:	4894      	ldr	r0, [pc, #592]	@ (8001860 <SPI_Pin+0x578>)
 800160e:	f7ff fcc3 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	799b      	ldrb	r3, [r3, #6]
 8001616:	461a      	mov	r2, r3
 8001618:	23d6      	movs	r3, #214	@ 0xd6
 800161a:	429a      	cmp	r2, r3
 800161c:	d10d      	bne.n	800163a <SPI_Pin+0x352>
 800161e:	2002      	movs	r0, #2
 8001620:	2400      	movs	r4, #0
 8001622:	2303      	movs	r3, #3
 8001624:	2200      	movs	r2, #0
 8001626:	2105      	movs	r1, #5
 8001628:	9102      	str	r1, [sp, #8]
 800162a:	9201      	str	r2, [sp, #4]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	4623      	mov	r3, r4
 8001630:	4602      	mov	r2, r0
 8001632:	210e      	movs	r1, #14
 8001634:	488a      	ldr	r0, [pc, #552]	@ (8001860 <SPI_Pin+0x578>)
 8001636:	f7ff fcaf 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	799b      	ldrb	r3, [r3, #6]
 800163e:	461a      	mov	r2, r3
 8001640:	2320      	movs	r3, #32
 8001642:	429a      	cmp	r2, r3
 8001644:	d10d      	bne.n	8001662 <SPI_Pin+0x37a>
 8001646:	2002      	movs	r0, #2
 8001648:	2400      	movs	r4, #0
 800164a:	2303      	movs	r3, #3
 800164c:	2200      	movs	r2, #0
 800164e:	2105      	movs	r1, #5
 8001650:	9102      	str	r1, [sp, #8]
 8001652:	9201      	str	r2, [sp, #4]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4623      	mov	r3, r4
 8001658:	4602      	mov	r2, r0
 800165a:	2102      	movs	r1, #2
 800165c:	4881      	ldr	r0, [pc, #516]	@ (8001864 <SPI_Pin+0x57c>)
 800165e:	f7ff fc9b 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PB15) GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	795b      	ldrb	r3, [r3, #5]
 8001666:	461a      	mov	r2, r3
 8001668:	23d7      	movs	r3, #215	@ 0xd7
 800166a:	429a      	cmp	r2, r3
 800166c:	d10d      	bne.n	800168a <SPI_Pin+0x3a2>
 800166e:	2002      	movs	r0, #2
 8001670:	2400      	movs	r4, #0
 8001672:	2303      	movs	r3, #3
 8001674:	2200      	movs	r2, #0
 8001676:	2105      	movs	r1, #5
 8001678:	9102      	str	r1, [sp, #8]
 800167a:	9201      	str	r2, [sp, #4]
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4623      	mov	r3, r4
 8001680:	4602      	mov	r2, r0
 8001682:	210f      	movs	r1, #15
 8001684:	4876      	ldr	r0, [pc, #472]	@ (8001860 <SPI_Pin+0x578>)
 8001686:	f7ff fc87 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PC3) GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	795b      	ldrb	r3, [r3, #5]
 800168e:	461a      	mov	r2, r3
 8001690:	2321      	movs	r3, #33	@ 0x21
 8001692:	429a      	cmp	r2, r3
 8001694:	d10d      	bne.n	80016b2 <SPI_Pin+0x3ca>
 8001696:	2002      	movs	r0, #2
 8001698:	2400      	movs	r4, #0
 800169a:	2303      	movs	r3, #3
 800169c:	2200      	movs	r2, #0
 800169e:	2105      	movs	r1, #5
 80016a0:	9102      	str	r1, [sp, #8]
 80016a2:	9201      	str	r2, [sp, #4]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4623      	mov	r3, r4
 80016a8:	4602      	mov	r2, r0
 80016aa:	2103      	movs	r1, #3
 80016ac:	486d      	ldr	r0, [pc, #436]	@ (8001864 <SPI_Pin+0x57c>)
 80016ae:	f7ff fc73 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016c0:	601a      	str	r2, [r3, #0]
}
 80016c2:	e22d      	b.n	8001b20 <SPI_Pin+0x838>
		else if(config->mode == 1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	89db      	ldrh	r3, [r3, #14]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d160      	bne.n	800178e <SPI_Pin+0x4a6>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	461a      	mov	r2, r3
 80016d2:	23d2      	movs	r3, #210	@ 0xd2
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d10d      	bne.n	80016f4 <SPI_Pin+0x40c>
 80016d8:	2002      	movs	r0, #2
 80016da:	2400      	movs	r4, #0
 80016dc:	2303      	movs	r3, #3
 80016de:	2200      	movs	r2, #0
 80016e0:	2105      	movs	r1, #5
 80016e2:	9102      	str	r1, [sp, #8]
 80016e4:	9201      	str	r2, [sp, #4]
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	4602      	mov	r2, r0
 80016ec:	210a      	movs	r1, #10
 80016ee:	485c      	ldr	r0, [pc, #368]	@ (8001860 <SPI_Pin+0x578>)
 80016f0:	f7ff fc52 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	791b      	ldrb	r3, [r3, #4]
 80016f8:	461a      	mov	r2, r3
 80016fa:	23d5      	movs	r3, #213	@ 0xd5
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d10d      	bne.n	800171c <SPI_Pin+0x434>
 8001700:	2002      	movs	r0, #2
 8001702:	2400      	movs	r4, #0
 8001704:	2303      	movs	r3, #3
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	9102      	str	r1, [sp, #8]
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4623      	mov	r3, r4
 8001712:	4602      	mov	r2, r0
 8001714:	210d      	movs	r1, #13
 8001716:	4852      	ldr	r0, [pc, #328]	@ (8001860 <SPI_Pin+0x578>)
 8001718:	f7ff fc3e 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	791b      	ldrb	r3, [r3, #4]
 8001720:	461a      	mov	r2, r3
 8001722:	23d2      	movs	r3, #210	@ 0xd2
 8001724:	429a      	cmp	r2, r3
 8001726:	d10d      	bne.n	8001744 <SPI_Pin+0x45c>
 8001728:	2002      	movs	r0, #2
 800172a:	2400      	movs	r4, #0
 800172c:	2303      	movs	r3, #3
 800172e:	2200      	movs	r2, #0
 8001730:	2105      	movs	r1, #5
 8001732:	9102      	str	r1, [sp, #8]
 8001734:	9201      	str	r2, [sp, #4]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	4623      	mov	r3, r4
 800173a:	4602      	mov	r2, r0
 800173c:	210a      	movs	r1, #10
 800173e:	4848      	ldr	r0, [pc, #288]	@ (8001860 <SPI_Pin+0x578>)
 8001740:	f7ff fc2a 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	791b      	ldrb	r3, [r3, #4]
 8001748:	461a      	mov	r2, r3
 800174a:	23d5      	movs	r3, #213	@ 0xd5
 800174c:	429a      	cmp	r2, r3
 800174e:	d10d      	bne.n	800176c <SPI_Pin+0x484>
 8001750:	2002      	movs	r0, #2
 8001752:	2400      	movs	r4, #0
 8001754:	2303      	movs	r3, #3
 8001756:	2200      	movs	r2, #0
 8001758:	2105      	movs	r1, #5
 800175a:	9102      	str	r1, [sp, #8]
 800175c:	9201      	str	r2, [sp, #4]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	4623      	mov	r3, r4
 8001762:	4602      	mov	r2, r0
 8001764:	210d      	movs	r1, #13
 8001766:	483e      	ldr	r0, [pc, #248]	@ (8001860 <SPI_Pin+0x578>)
 8001768:	f7ff fc16 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800177a:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	e1c8      	b.n	8001b20 <SPI_Pin+0x838>
		else if(config->mode == 2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	89db      	ldrh	r3, [r3, #14]
 8001792:	2b02      	cmp	r3, #2
 8001794:	f040 81c4 	bne.w	8001b20 <SPI_Pin+0x838>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	791b      	ldrb	r3, [r3, #4]
 800179c:	461a      	mov	r2, r3
 800179e:	23d2      	movs	r3, #210	@ 0xd2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10d      	bne.n	80017c0 <SPI_Pin+0x4d8>
 80017a4:	2002      	movs	r0, #2
 80017a6:	2400      	movs	r4, #0
 80017a8:	2303      	movs	r3, #3
 80017aa:	2200      	movs	r2, #0
 80017ac:	2105      	movs	r1, #5
 80017ae:	9102      	str	r1, [sp, #8]
 80017b0:	9201      	str	r2, [sp, #4]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	4623      	mov	r3, r4
 80017b6:	4602      	mov	r2, r0
 80017b8:	210a      	movs	r1, #10
 80017ba:	4829      	ldr	r0, [pc, #164]	@ (8001860 <SPI_Pin+0x578>)
 80017bc:	f7ff fbec 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	461a      	mov	r2, r3
 80017c6:	23d5      	movs	r3, #213	@ 0xd5
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d10d      	bne.n	80017e8 <SPI_Pin+0x500>
 80017cc:	2002      	movs	r0, #2
 80017ce:	2400      	movs	r4, #0
 80017d0:	2303      	movs	r3, #3
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	9102      	str	r1, [sp, #8]
 80017d8:	9201      	str	r2, [sp, #4]
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4623      	mov	r3, r4
 80017de:	4602      	mov	r2, r0
 80017e0:	210d      	movs	r1, #13
 80017e2:	481f      	ldr	r0, [pc, #124]	@ (8001860 <SPI_Pin+0x578>)
 80017e4:	f7ff fbd8 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	799b      	ldrb	r3, [r3, #6]
 80017ec:	461a      	mov	r2, r3
 80017ee:	23d6      	movs	r3, #214	@ 0xd6
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d10d      	bne.n	8001810 <SPI_Pin+0x528>
 80017f4:	2002      	movs	r0, #2
 80017f6:	2400      	movs	r4, #0
 80017f8:	2303      	movs	r3, #3
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	9102      	str	r1, [sp, #8]
 8001800:	9201      	str	r2, [sp, #4]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4623      	mov	r3, r4
 8001806:	4602      	mov	r2, r0
 8001808:	210e      	movs	r1, #14
 800180a:	4815      	ldr	r0, [pc, #84]	@ (8001860 <SPI_Pin+0x578>)
 800180c:	f7ff fbc4 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	799b      	ldrb	r3, [r3, #6]
 8001814:	461a      	mov	r2, r3
 8001816:	2320      	movs	r3, #32
 8001818:	429a      	cmp	r2, r3
 800181a:	d10d      	bne.n	8001838 <SPI_Pin+0x550>
 800181c:	2002      	movs	r0, #2
 800181e:	2400      	movs	r4, #0
 8001820:	2303      	movs	r3, #3
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	9102      	str	r1, [sp, #8]
 8001828:	9201      	str	r2, [sp, #4]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4623      	mov	r3, r4
 800182e:	4602      	mov	r2, r0
 8001830:	2102      	movs	r1, #2
 8001832:	480c      	ldr	r0, [pc, #48]	@ (8001864 <SPI_Pin+0x57c>)
 8001834:	f7ff fbb0 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001846:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001856:	601a      	str	r2, [r3, #0]
}
 8001858:	e162      	b.n	8001b20 <SPI_Pin+0x838>
 800185a:	bf00      	nop
 800185c:	40003800 	.word	0x40003800
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
	else if(config -> Port == SPI3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4aae      	ldr	r2, [pc, #696]	@ (8001b28 <SPI_Pin+0x840>)
 800186e:	4293      	cmp	r3, r2
 8001870:	f040 8156 	bne.w	8001b20 <SPI_Pin+0x838>
		if(config->mode == 0)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	89db      	ldrh	r3, [r3, #14]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f040 8084 	bne.w	8001986 <SPI_Pin+0x69e>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	461a      	mov	r2, r3
 8001884:	2317      	movs	r3, #23
 8001886:	429a      	cmp	r2, r3
 8001888:	d10d      	bne.n	80018a6 <SPI_Pin+0x5be>
 800188a:	2002      	movs	r0, #2
 800188c:	2400      	movs	r4, #0
 800188e:	2303      	movs	r3, #3
 8001890:	2200      	movs	r2, #0
 8001892:	2106      	movs	r1, #6
 8001894:	9102      	str	r1, [sp, #8]
 8001896:	9201      	str	r2, [sp, #4]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4623      	mov	r3, r4
 800189c:	4602      	mov	r2, r0
 800189e:	2103      	movs	r1, #3
 80018a0:	48a2      	ldr	r0, [pc, #648]	@ (8001b2c <SPI_Pin+0x844>)
 80018a2:	f7ff fb79 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d10d      	bne.n	80018d0 <SPI_Pin+0x5e8>
 80018b4:	2002      	movs	r0, #2
 80018b6:	2400      	movs	r4, #0
 80018b8:	2303      	movs	r3, #3
 80018ba:	2200      	movs	r2, #0
 80018bc:	2106      	movs	r1, #6
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4623      	mov	r3, r4
 80018c6:	4602      	mov	r2, r0
 80018c8:	210a      	movs	r1, #10
 80018ca:	4899      	ldr	r0, [pc, #612]	@ (8001b30 <SPI_Pin+0x848>)
 80018cc:	f7ff fb64 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	799b      	ldrb	r3, [r3, #6]
 80018d4:	461a      	mov	r2, r3
 80018d6:	2318      	movs	r3, #24
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10d      	bne.n	80018f8 <SPI_Pin+0x610>
 80018dc:	2002      	movs	r0, #2
 80018de:	2400      	movs	r4, #0
 80018e0:	2303      	movs	r3, #3
 80018e2:	2200      	movs	r2, #0
 80018e4:	2106      	movs	r1, #6
 80018e6:	9102      	str	r1, [sp, #8]
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4623      	mov	r3, r4
 80018ee:	4602      	mov	r2, r0
 80018f0:	2104      	movs	r1, #4
 80018f2:	488e      	ldr	r0, [pc, #568]	@ (8001b2c <SPI_Pin+0x844>)
 80018f4:	f7ff fb50 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	799b      	ldrb	r3, [r3, #6]
 80018fc:	461a      	mov	r2, r3
 80018fe:	f240 1337 	movw	r3, #311	@ 0x137
 8001902:	429a      	cmp	r2, r3
 8001904:	d10d      	bne.n	8001922 <SPI_Pin+0x63a>
 8001906:	2002      	movs	r0, #2
 8001908:	2400      	movs	r4, #0
 800190a:	2303      	movs	r3, #3
 800190c:	2200      	movs	r2, #0
 800190e:	2106      	movs	r1, #6
 8001910:	9102      	str	r1, [sp, #8]
 8001912:	9201      	str	r2, [sp, #4]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4623      	mov	r3, r4
 8001918:	4602      	mov	r2, r0
 800191a:	210b      	movs	r1, #11
 800191c:	4884      	ldr	r0, [pc, #528]	@ (8001b30 <SPI_Pin+0x848>)
 800191e:	f7ff fb3b 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	795b      	ldrb	r3, [r3, #5]
 8001926:	461a      	mov	r2, r3
 8001928:	2319      	movs	r3, #25
 800192a:	429a      	cmp	r2, r3
 800192c:	d10d      	bne.n	800194a <SPI_Pin+0x662>
 800192e:	2002      	movs	r0, #2
 8001930:	2400      	movs	r4, #0
 8001932:	2303      	movs	r3, #3
 8001934:	2200      	movs	r2, #0
 8001936:	2106      	movs	r1, #6
 8001938:	9102      	str	r1, [sp, #8]
 800193a:	9201      	str	r2, [sp, #4]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	4623      	mov	r3, r4
 8001940:	4602      	mov	r2, r0
 8001942:	2105      	movs	r1, #5
 8001944:	4879      	ldr	r0, [pc, #484]	@ (8001b2c <SPI_Pin+0x844>)
 8001946:	f7ff fb27 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	795b      	ldrb	r3, [r3, #5]
 800194e:	461a      	mov	r2, r3
 8001950:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8001954:	429a      	cmp	r2, r3
 8001956:	d10d      	bne.n	8001974 <SPI_Pin+0x68c>
 8001958:	2002      	movs	r0, #2
 800195a:	2400      	movs	r4, #0
 800195c:	2303      	movs	r3, #3
 800195e:	2200      	movs	r2, #0
 8001960:	2106      	movs	r1, #6
 8001962:	9102      	str	r1, [sp, #8]
 8001964:	9201      	str	r2, [sp, #4]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	4623      	mov	r3, r4
 800196a:	4602      	mov	r2, r0
 800196c:	210c      	movs	r1, #12
 800196e:	4870      	ldr	r0, [pc, #448]	@ (8001b30 <SPI_Pin+0x848>)
 8001970:	f7ff fb12 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001982:	601a      	str	r2, [r3, #0]
}
 8001984:	e0cc      	b.n	8001b20 <SPI_Pin+0x838>
		else if(config->mode == 1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	89db      	ldrh	r3, [r3, #14]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d162      	bne.n	8001a54 <SPI_Pin+0x76c>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	791b      	ldrb	r3, [r3, #4]
 8001992:	461a      	mov	r2, r3
 8001994:	2317      	movs	r3, #23
 8001996:	429a      	cmp	r2, r3
 8001998:	d10d      	bne.n	80019b6 <SPI_Pin+0x6ce>
 800199a:	2002      	movs	r0, #2
 800199c:	2400      	movs	r4, #0
 800199e:	2303      	movs	r3, #3
 80019a0:	2200      	movs	r2, #0
 80019a2:	2106      	movs	r1, #6
 80019a4:	9102      	str	r1, [sp, #8]
 80019a6:	9201      	str	r2, [sp, #4]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	4623      	mov	r3, r4
 80019ac:	4602      	mov	r2, r0
 80019ae:	2103      	movs	r1, #3
 80019b0:	485e      	ldr	r0, [pc, #376]	@ (8001b2c <SPI_Pin+0x844>)
 80019b2:	f7ff faf1 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	791b      	ldrb	r3, [r3, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d10d      	bne.n	80019e0 <SPI_Pin+0x6f8>
 80019c4:	2002      	movs	r0, #2
 80019c6:	2400      	movs	r4, #0
 80019c8:	2303      	movs	r3, #3
 80019ca:	2200      	movs	r2, #0
 80019cc:	2106      	movs	r1, #6
 80019ce:	9102      	str	r1, [sp, #8]
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4623      	mov	r3, r4
 80019d6:	4602      	mov	r2, r0
 80019d8:	210a      	movs	r1, #10
 80019da:	4855      	ldr	r0, [pc, #340]	@ (8001b30 <SPI_Pin+0x848>)
 80019dc:	f7ff fadc 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	799b      	ldrb	r3, [r3, #6]
 80019e4:	461a      	mov	r2, r3
 80019e6:	2318      	movs	r3, #24
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d10d      	bne.n	8001a08 <SPI_Pin+0x720>
 80019ec:	2002      	movs	r0, #2
 80019ee:	2400      	movs	r4, #0
 80019f0:	2303      	movs	r3, #3
 80019f2:	2200      	movs	r2, #0
 80019f4:	2106      	movs	r1, #6
 80019f6:	9102      	str	r1, [sp, #8]
 80019f8:	9201      	str	r2, [sp, #4]
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4623      	mov	r3, r4
 80019fe:	4602      	mov	r2, r0
 8001a00:	2104      	movs	r1, #4
 8001a02:	484a      	ldr	r0, [pc, #296]	@ (8001b2c <SPI_Pin+0x844>)
 8001a04:	f7ff fac8 	bl	8000f98 <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	799b      	ldrb	r3, [r3, #6]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f240 1337 	movw	r3, #311	@ 0x137
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d10d      	bne.n	8001a32 <SPI_Pin+0x74a>
 8001a16:	2002      	movs	r0, #2
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2106      	movs	r1, #6
 8001a20:	9102      	str	r1, [sp, #8]
 8001a22:	9201      	str	r2, [sp, #4]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	4623      	mov	r3, r4
 8001a28:	4602      	mov	r2, r0
 8001a2a:	210b      	movs	r1, #11
 8001a2c:	4840      	ldr	r0, [pc, #256]	@ (8001b30 <SPI_Pin+0x848>)
 8001a2e:	f7ff fab3 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a40:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a50:	601a      	str	r2, [r3, #0]
}
 8001a52:	e065      	b.n	8001b20 <SPI_Pin+0x838>
		else if(config->mode == 2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	89db      	ldrh	r3, [r3, #14]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d161      	bne.n	8001b20 <SPI_Pin+0x838>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	791b      	ldrb	r3, [r3, #4]
 8001a60:	461a      	mov	r2, r3
 8001a62:	2317      	movs	r3, #23
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10d      	bne.n	8001a84 <SPI_Pin+0x79c>
 8001a68:	2002      	movs	r0, #2
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2106      	movs	r1, #6
 8001a72:	9102      	str	r1, [sp, #8]
 8001a74:	9201      	str	r2, [sp, #4]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	4623      	mov	r3, r4
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	2103      	movs	r1, #3
 8001a7e:	482b      	ldr	r0, [pc, #172]	@ (8001b2c <SPI_Pin+0x844>)
 8001a80:	f7ff fa8a 	bl	8000f98 <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10d      	bne.n	8001aae <SPI_Pin+0x7c6>
 8001a92:	2002      	movs	r0, #2
 8001a94:	2400      	movs	r4, #0
 8001a96:	2303      	movs	r3, #3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2106      	movs	r1, #6
 8001a9c:	9102      	str	r1, [sp, #8]
 8001a9e:	9201      	str	r2, [sp, #4]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	210a      	movs	r1, #10
 8001aa8:	4821      	ldr	r0, [pc, #132]	@ (8001b30 <SPI_Pin+0x848>)
 8001aaa:	f7ff fa75 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	795b      	ldrb	r3, [r3, #5]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2319      	movs	r3, #25
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d10d      	bne.n	8001ad6 <SPI_Pin+0x7ee>
 8001aba:	2002      	movs	r0, #2
 8001abc:	2400      	movs	r4, #0
 8001abe:	2303      	movs	r3, #3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2106      	movs	r1, #6
 8001ac4:	9102      	str	r1, [sp, #8]
 8001ac6:	9201      	str	r2, [sp, #4]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4623      	mov	r3, r4
 8001acc:	4602      	mov	r2, r0
 8001ace:	2105      	movs	r1, #5
 8001ad0:	4816      	ldr	r0, [pc, #88]	@ (8001b2c <SPI_Pin+0x844>)
 8001ad2:	f7ff fa61 	bl	8000f98 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	795b      	ldrb	r3, [r3, #5]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d10d      	bne.n	8001b00 <SPI_Pin+0x818>
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2303      	movs	r3, #3
 8001aea:	2200      	movs	r2, #0
 8001aec:	2106      	movs	r1, #6
 8001aee:	9102      	str	r1, [sp, #8]
 8001af0:	9201      	str	r2, [sp, #4]
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	4623      	mov	r3, r4
 8001af6:	4602      	mov	r2, r0
 8001af8:	210c      	movs	r1, #12
 8001afa:	480d      	ldr	r0, [pc, #52]	@ (8001b30 <SPI_Pin+0x848>)
 8001afc:	f7ff fa4c 	bl	8000f98 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b0e:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	40003c00 	.word	0x40003c00
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	40020800 	.word	0x40020800

08001b34 <SPI_Init>:


void SPI_Init(SPI_Config *config)
{
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af04      	add	r7, sp, #16
 8001b3a:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Type.Master){
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	8b1b      	ldrh	r3, [r3, #24]
 8001b40:	2204      	movs	r2, #4
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10f      	bne.n	8001b66 <SPI_Init+0x32>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6898      	ldr	r0, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	7b19      	ldrb	r1, [r3, #12]
 8001b4e:	2501      	movs	r5, #1
 8001b50:	2600      	movs	r6, #0
 8001b52:	2303      	movs	r3, #3
 8001b54:	2201      	movs	r2, #1
 8001b56:	2400      	movs	r4, #0
 8001b58:	9402      	str	r4, [sp, #8]
 8001b5a:	9201      	str	r2, [sp, #4]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4633      	mov	r3, r6
 8001b60:	462a      	mov	r2, r5
 8001b62:	f7ff fa19 	bl	8000f98 <GPIO_Pin_Init>
	}
	if(config->type == SPI_Type.Slave){
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8b1b      	ldrh	r3, [r3, #24]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d10f      	bne.n	8001b90 <SPI_Init+0x5c>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.Input, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6898      	ldr	r0, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7b19      	ldrb	r1, [r3, #12]
 8001b78:	2500      	movs	r5, #0
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2400      	movs	r4, #0
 8001b82:	9402      	str	r4, [sp, #8]
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4633      	mov	r3, r6
 8001b8a:	462a      	mov	r2, r5
 8001b8c:	f7ff fa04 	bl	8000f98 <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fb09 	bl	80011a8 <SPI_Clock_Enable>
	SPI_Pin(config);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fba6 	bl	80012e8 <SPI_Pin>

	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8b99      	ldrh	r1, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	8b5b      	ldrh	r3, [r3, #26]
					config->type | config->frame_format |
					config->data_format | config->crc ;
 8001baa:	430b      	orrs	r3, r1
 8001bac:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	8b1b      	ldrh	r3, [r3, #24]
					config->data_format | config->crc ;
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	8a9b      	ldrh	r3, [r3, #20]
					config->data_format | config->crc ;
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8a5b      	ldrh	r3, [r3, #18]
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	8a1b      	ldrh	r3, [r3, #16]
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	4619      	mov	r1, r3
	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]
	config->Port->CR2 |= config->dma | config->interrupt;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	8c19      	ldrh	r1, [r3, #32]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8bdb      	ldrh	r3, [r3, #30]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4619      	mov	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
	config->Port->CR1 |= config->mode | config->type;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	89d9      	ldrh	r1, [r3, #14]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	8b1b      	ldrh	r3, [r3, #24]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

//	if(config->Port == SPI1)config->speed = (SystemCoreClock/2)/(2*2^(config->prescaler));
//	else config->speed = (SystemCoreClock/4)/(2*2^(config->prescaler));

	config -> Port -> CR1 |= config->prescaler << SPI_CR1_BR_Pos;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8adb      	ldrh	r3, [r3, #22]
 8001c1a:	00da      	lsls	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 &= ~SPI_CR1_SSM ;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c32:	601a      	str	r2, [r3, #0]
	config->Port -> CR2 |=  SPI_CR2_SSOE ;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0204 	orr.w	r2, r2, #4
 8001c42:	605a      	str	r2, [r3, #4]


	if(config->dma == SPI_DMA.RX_DMA_Enable)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	8c1b      	ldrh	r3, [r3, #32]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d176      	bne.n	8001d3c <SPI_Init+0x208>
	{
		if(config->Port == SPI1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7a      	ldr	r2, [pc, #488]	@ (8001e3c <SPI_Init+0x308>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d122      	bne.n	8001c9e <SPI_Init+0x16a>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI1_RX;
 8001c58:	4a79      	ldr	r2, [pc, #484]	@ (8001e40 <SPI_Init+0x30c>)
 8001c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e44 <SPI_Init+0x310>)
 8001c5c:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA2;
 8001c5e:	4b79      	ldr	r3, [pc, #484]	@ (8001e44 <SPI_Init+0x310>)
 8001c60:	4a79      	ldr	r2, [pc, #484]	@ (8001e48 <SPI_Init+0x314>)
 8001c62:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 8001c64:	2203      	movs	r2, #3
 8001c66:	4b77      	ldr	r3, [pc, #476]	@ (8001e44 <SPI_Init+0x310>)
 8001c68:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4b75      	ldr	r3, [pc, #468]	@ (8001e44 <SPI_Init+0x310>)
 8001c6e:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001c70:	2220      	movs	r2, #32
 8001c72:	4b74      	ldr	r3, [pc, #464]	@ (8001e44 <SPI_Init+0x310>)
 8001c74:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 8001c76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001c7a:	4b72      	ldr	r3, [pc, #456]	@ (8001e44 <SPI_Init+0x310>)
 8001c7c:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4b70      	ldr	r3, [pc, #448]	@ (8001e44 <SPI_Init+0x310>)
 8001c82:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001c84:	2200      	movs	r2, #0
 8001c86:	4b6f      	ldr	r3, [pc, #444]	@ (8001e44 <SPI_Init+0x310>)
 8001c88:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8001e44 <SPI_Init+0x310>)
 8001c8e:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8001c90:	2200      	movs	r2, #0
 8001c92:	4b6c      	ldr	r3, [pc, #432]	@ (8001e44 <SPI_Init+0x310>)
 8001c94:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 8001c96:	486b      	ldr	r0, [pc, #428]	@ (8001e44 <SPI_Init+0x310>)
 8001c98:	f7fe ffb6 	bl	8000c08 <DMA_Init>
 8001c9c:	e04e      	b.n	8001d3c <SPI_Init+0x208>
		}
		else if(config->Port == SPI2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6a      	ldr	r2, [pc, #424]	@ (8001e4c <SPI_Init+0x318>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d122      	bne.n	8001cee <SPI_Init+0x1ba>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI2_RX;
 8001ca8:	4a69      	ldr	r2, [pc, #420]	@ (8001e50 <SPI_Init+0x31c>)
 8001caa:	4b66      	ldr	r3, [pc, #408]	@ (8001e44 <SPI_Init+0x310>)
 8001cac:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 8001cae:	4b65      	ldr	r3, [pc, #404]	@ (8001e44 <SPI_Init+0x310>)
 8001cb0:	4a68      	ldr	r2, [pc, #416]	@ (8001e54 <SPI_Init+0x320>)
 8001cb2:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	4b63      	ldr	r3, [pc, #396]	@ (8001e44 <SPI_Init+0x310>)
 8001cb8:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <SPI_Init+0x310>)
 8001cbe:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	4b60      	ldr	r3, [pc, #384]	@ (8001e44 <SPI_Init+0x310>)
 8001cc4:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 8001cc6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001cca:	4b5e      	ldr	r3, [pc, #376]	@ (8001e44 <SPI_Init+0x310>)
 8001ccc:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e44 <SPI_Init+0x310>)
 8001cd2:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <SPI_Init+0x310>)
 8001cd8:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4b59      	ldr	r3, [pc, #356]	@ (8001e44 <SPI_Init+0x310>)
 8001cde:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4b58      	ldr	r3, [pc, #352]	@ (8001e44 <SPI_Init+0x310>)
 8001ce4:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 8001ce6:	4857      	ldr	r0, [pc, #348]	@ (8001e44 <SPI_Init+0x310>)
 8001ce8:	f7fe ff8e 	bl	8000c08 <DMA_Init>
 8001cec:	e026      	b.n	8001d3c <SPI_Init+0x208>
		}
		else if(config->Port == SPI3)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a59      	ldr	r2, [pc, #356]	@ (8001e58 <SPI_Init+0x324>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d121      	bne.n	8001d3c <SPI_Init+0x208>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI3_RX;
 8001cf8:	4a58      	ldr	r2, [pc, #352]	@ (8001e5c <SPI_Init+0x328>)
 8001cfa:	4b52      	ldr	r3, [pc, #328]	@ (8001e44 <SPI_Init+0x310>)
 8001cfc:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 8001cfe:	4b51      	ldr	r3, [pc, #324]	@ (8001e44 <SPI_Init+0x310>)
 8001d00:	4a54      	ldr	r2, [pc, #336]	@ (8001e54 <SPI_Init+0x320>)
 8001d02:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 8001d04:	2200      	movs	r2, #0
 8001d06:	4b4f      	ldr	r3, [pc, #316]	@ (8001e44 <SPI_Init+0x310>)
 8001d08:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <SPI_Init+0x310>)
 8001d0e:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001d10:	2220      	movs	r2, #32
 8001d12:	4b4c      	ldr	r3, [pc, #304]	@ (8001e44 <SPI_Init+0x310>)
 8001d14:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 8001d16:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <SPI_Init+0x310>)
 8001d1c:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4b48      	ldr	r3, [pc, #288]	@ (8001e44 <SPI_Init+0x310>)
 8001d22:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001d24:	2200      	movs	r2, #0
 8001d26:	4b47      	ldr	r3, [pc, #284]	@ (8001e44 <SPI_Init+0x310>)
 8001d28:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <SPI_Init+0x310>)
 8001d2e:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8001d30:	2200      	movs	r2, #0
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <SPI_Init+0x310>)
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 8001d36:	4843      	ldr	r0, [pc, #268]	@ (8001e44 <SPI_Init+0x310>)
 8001d38:	f7fe ff66 	bl	8000c08 <DMA_Init>
		}
	}
	if(config->dma == SPI_DMA.TX_DMA_Enable)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	8c1b      	ldrh	r3, [r3, #32]
 8001d40:	2202      	movs	r2, #2
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d176      	bne.n	8001e34 <SPI_Init+0x300>
	{
		if(config->Port == SPI1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <SPI_Init+0x308>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d122      	bne.n	8001d96 <SPI_Init+0x262>
		{
			xDMA_TX.stream = SPI_DMA_Stream.SPI1_TX;
 8001d50:	4a43      	ldr	r2, [pc, #268]	@ (8001e60 <SPI_Init+0x32c>)
 8001d52:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <SPI_Init+0x330>)
 8001d54:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA2;
 8001d56:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <SPI_Init+0x330>)
 8001d58:	4a3b      	ldr	r2, [pc, #236]	@ (8001e48 <SPI_Init+0x314>)
 8001d5a:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <SPI_Init+0x330>)
 8001d60:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 8001d62:	2200      	movs	r2, #0
 8001d64:	4b3f      	ldr	r3, [pc, #252]	@ (8001e64 <SPI_Init+0x330>)
 8001d66:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001d68:	2220      	movs	r2, #32
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <SPI_Init+0x330>)
 8001d6c:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 8001d6e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d72:	4b3c      	ldr	r3, [pc, #240]	@ (8001e64 <SPI_Init+0x330>)
 8001d74:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001d76:	2200      	movs	r2, #0
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <SPI_Init+0x330>)
 8001d7a:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	4b39      	ldr	r3, [pc, #228]	@ (8001e64 <SPI_Init+0x330>)
 8001d80:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001d82:	2200      	movs	r2, #0
 8001d84:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <SPI_Init+0x330>)
 8001d86:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4b36      	ldr	r3, [pc, #216]	@ (8001e64 <SPI_Init+0x330>)
 8001d8c:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 8001d8e:	4835      	ldr	r0, [pc, #212]	@ (8001e64 <SPI_Init+0x330>)
 8001d90:	f7fe ff3a 	bl	8000c08 <DMA_Init>
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
			DMA_Init(&xDMA_TX);
		}
	}
}
 8001d94:	e04e      	b.n	8001e34 <SPI_Init+0x300>
		else if(config->Port == SPI2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8001e4c <SPI_Init+0x318>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d122      	bne.n	8001de6 <SPI_Init+0x2b2>
			xDMA_TX.stream = SPI_DMA_Stream.SPI2_TX;
 8001da0:	4a31      	ldr	r2, [pc, #196]	@ (8001e68 <SPI_Init+0x334>)
 8001da2:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <SPI_Init+0x330>)
 8001da4:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 8001da6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e64 <SPI_Init+0x330>)
 8001da8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e54 <SPI_Init+0x320>)
 8001daa:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 8001dac:	2200      	movs	r2, #0
 8001dae:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <SPI_Init+0x330>)
 8001db0:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 8001db2:	2200      	movs	r2, #0
 8001db4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <SPI_Init+0x330>)
 8001db6:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001db8:	2220      	movs	r2, #32
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <SPI_Init+0x330>)
 8001dbc:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 8001dbe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001dc2:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <SPI_Init+0x330>)
 8001dc4:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <SPI_Init+0x330>)
 8001dca:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <SPI_Init+0x330>)
 8001dd0:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4b23      	ldr	r3, [pc, #140]	@ (8001e64 <SPI_Init+0x330>)
 8001dd6:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <SPI_Init+0x330>)
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 8001dde:	4821      	ldr	r0, [pc, #132]	@ (8001e64 <SPI_Init+0x330>)
 8001de0:	f7fe ff12 	bl	8000c08 <DMA_Init>
}
 8001de4:	e026      	b.n	8001e34 <SPI_Init+0x300>
		else if(config->Port == SPI3)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a1b      	ldr	r2, [pc, #108]	@ (8001e58 <SPI_Init+0x324>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d121      	bne.n	8001e34 <SPI_Init+0x300>
			xDMA_TX.stream = SPI_DMA_Stream.SPI3_TX;
 8001df0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e6c <SPI_Init+0x338>)
 8001df2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e64 <SPI_Init+0x330>)
 8001df4:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <SPI_Init+0x330>)
 8001df8:	4a16      	ldr	r2, [pc, #88]	@ (8001e54 <SPI_Init+0x320>)
 8001dfa:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <SPI_Init+0x330>)
 8001e00:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 8001e02:	2200      	movs	r2, #0
 8001e04:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <SPI_Init+0x330>)
 8001e06:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8001e08:	2220      	movs	r2, #32
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <SPI_Init+0x330>)
 8001e0c:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 8001e0e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e12:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <SPI_Init+0x330>)
 8001e14:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 8001e16:	2200      	movs	r2, #0
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <SPI_Init+0x330>)
 8001e1a:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <SPI_Init+0x330>)
 8001e20:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8001e22:	2200      	movs	r2, #0
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <SPI_Init+0x330>)
 8001e26:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 8001e28:	2200      	movs	r2, #0
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <SPI_Init+0x330>)
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 8001e2e:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <SPI_Init+0x330>)
 8001e30:	f7fe feea 	bl	8000c08 <DMA_Init>
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3c:	40013000 	.word	0x40013000
 8001e40:	40026410 	.word	0x40026410
 8001e44:	20000094 	.word	0x20000094
 8001e48:	40026400 	.word	0x40026400
 8001e4c:	40003800 	.word	0x40003800
 8001e50:	40026058 	.word	0x40026058
 8001e54:	40026000 	.word	0x40026000
 8001e58:	40003c00 	.word	0x40003c00
 8001e5c:	40026040 	.word	0x40026040
 8001e60:	40026458 	.word	0x40026458
 8001e64:	20000060 	.word	0x20000060
 8001e68:	40026070 	.word	0x40026070
 8001e6c:	400260b8 	.word	0x400260b8

08001e70 <SPI_Enable>:

void SPI_Enable(SPI_Config *config)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SPI_TRX_Byte>:
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
}


uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8001ea4:	bf00      	nop
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f8      	beq.n	8001ea6 <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	887a      	ldrh	r2, [r7, #2]
 8001eba:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 8001ebc:	bf00      	nop
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f8      	beq.n	8001ebe <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8001ed6:	bf00      	nop
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f8      	beq.n	8001ed8 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8001ee6:	bf00      	nop
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f8      	bne.n	8001ee8 <SPI_TRX_Byte+0x54>
	return temp;
 8001ef6:	89fb      	ldrh	r3, [r7, #14]
 8001ef8:	b29b      	uxth	r3, r3
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <SPI_NSS_High>:
	}

}

void SPI_NSS_High(SPI_Config *config)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	7b1b      	ldrb	r3, [r3, #12]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f7fe ffb9 	bl	8000e90 <GPIO_Pin_High>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <SPI_NSS_Low>:

void SPI_NSS_Low(SPI_Config *config)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7b1b      	ldrb	r3, [r3, #12]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f7fe ffbb 	bl	8000eb4 <GPIO_Pin_Low>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <__NVIC_SetPriority>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	@ (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f7ff ffc2 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <MCU_Clock_Setup>:
{
	return (SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
}

__STATIC_INLINE void MCU_Clock_Setup(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8001fea:	23a8      	movs	r3, #168	@ 0xa8
 8001fec:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 8001ff2:	2307      	movs	r3, #7
 8001ff4:	713b      	strb	r3, [r7, #4]

	RCC->PLLCFGR = 0x00000000;
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a3a      	ldr	r2, [pc, #232]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002006:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8002008:	bf00      	nop
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f9      	beq.n	800200a <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8002016:	4b35      	ldr	r3, [pc, #212]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a34      	ldr	r2, [pc, #208]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8002022:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <MCU_Clock_Setup+0x110>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a32      	ldr	r2, [pc, #200]	@ (80020f0 <MCU_Clock_Setup+0x110>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800202c:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800202e:	4b31      	ldr	r3, [pc, #196]	@ (80020f4 <MCU_Clock_Setup+0x114>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a30      	ldr	r2, [pc, #192]	@ (80020f4 <MCU_Clock_Setup+0x114>)
 8002034:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002038:	f043 0305 	orr.w	r3, r3, #5
 800203c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800203e:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	793a      	ldrb	r2, [r7, #4]
 8002044:	0611      	lsls	r1, r2, #24
 8002046:	797a      	ldrb	r2, [r7, #5]
 8002048:	0412      	lsls	r2, r2, #16
 800204a:	4311      	orrs	r1, r2
 800204c:	79ba      	ldrb	r2, [r7, #6]
 800204e:	0192      	lsls	r2, r2, #6
 8002050:	4311      	orrs	r1, r2
 8002052:	79fa      	ldrb	r2, [r7, #7]
 8002054:	430a      	orrs	r2, r1
 8002056:	4611      	mov	r1, r2
 8002058:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 800205a:	430b      	orrs	r3, r1
 800205c:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800205e:	4b23      	ldr	r3, [pc, #140]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a22      	ldr	r2, [pc, #136]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002064:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002068:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800206a:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 800206c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002078:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800207c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800207e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4a1a      	ldr	r2, [pc, #104]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002084:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002088:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800208a:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 8002090:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002094:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8002096:	bf00      	nop
 8002098:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f9      	beq.n	8002098 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a10      	ldr	r2, [pc, #64]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80020b0:	bf00      	nop
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d1f9      	bne.n	80020b2 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 80020be:	f000 f871 	bl	80021a4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80020c2:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <MCU_Clock_Setup+0x118>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <MCU_Clock_Setup+0x11c>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff63 	bl	8001f9c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80020d6:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <MCU_Clock_Setup+0x10c>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40007000 	.word	0x40007000
 80020f4:	40023c00 	.word	0x40023c00
 80020f8:	20000000 	.word	0x20000000
 80020fc:	18618619 	.word	0x18618619

08002100 <Delay_Config>:
}



__STATIC_INLINE uint32_t Delay_Config(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

	SysTick->CTRL = 0;
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <Delay_Config+0x2c>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <Delay_Config+0x2c>)
 800210c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002110:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <Delay_Config+0x2c>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <Delay_Config+0x2c>)
 800211a:	2205      	movs	r2, #5
 800211c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <main>:
NRF24L01_Config master1;

SPI_Config master_slave1;

int main(void)
{
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8002134:	f7ff ff54 	bl	8001fe0 <MCU_Clock_Setup>
	Delay_Config();
 8002138:	f7ff ffe2 	bl	8002100 <Delay_Config>
	Console_Init(USART1, 9600);
 800213c:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <main+0x44>)
 8002142:	f7fe fd15 	bl	8000b70 <Console_Init>

	SPI_Config_Reset(&master_slave1);
 8002146:	480c      	ldr	r0, [pc, #48]	@ (8002178 <main+0x48>)
 8002148:	f7ff f868 	bl	800121c <SPI_Config_Reset>


	master1.NRF24L01_SPI_Driver = master_slave1;
 800214c:	4a0b      	ldr	r2, [pc, #44]	@ (800217c <main+0x4c>)
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <main+0x48>)
 8002150:	4614      	mov	r4, r2
 8002152:	461d      	mov	r5, r3
 8002154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800215a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002160:	e884 0003 	stmia.w	r4, {r0, r1}

	NRF24L01_Init(&master1);
 8002164:	4805      	ldr	r0, [pc, #20]	@ (800217c <main+0x4c>)
 8002166:	f7fe ff95 	bl	8001094 <NRF24L01_Init>



	NRF24L01_Init(&master1);
 800216a:	4804      	ldr	r0, [pc, #16]	@ (800217c <main+0x4c>)
 800216c:	f7fe ff92 	bl	8001094 <NRF24L01_Init>




    /* Loop forever */
	for(;;);
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <main+0x40>
 8002174:	40011000 	.word	0x40011000
 8002178:	20000100 	.word	0x20000100
 800217c:	200000c8 	.word	0x200000c8

08002180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <SystemInit+0x20>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <SystemInit+0x20>)
 800218c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	2302      	movs	r3, #2
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	2302      	movs	r3, #2
 80021bc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80021be:	4b34      	ldr	r3, [pc, #208]	@ (8002290 <SystemCoreClockUpdate+0xec>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d011      	beq.n	80021f2 <SystemCoreClockUpdate+0x4e>
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d844      	bhi.n	800225e <SystemCoreClockUpdate+0xba>
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <SystemCoreClockUpdate+0x3e>
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d004      	beq.n	80021ea <SystemCoreClockUpdate+0x46>
 80021e0:	e03d      	b.n	800225e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80021e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <SystemCoreClockUpdate+0xf0>)
 80021e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002298 <SystemCoreClockUpdate+0xf4>)
 80021e6:	601a      	str	r2, [r3, #0]
      break;
 80021e8:	e03d      	b.n	8002266 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80021ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <SystemCoreClockUpdate+0xf0>)
 80021ec:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <SystemCoreClockUpdate+0xf8>)
 80021ee:	601a      	str	r2, [r3, #0]
      break;
 80021f0:	e039      	b.n	8002266 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80021f2:	4b27      	ldr	r3, [pc, #156]	@ (8002290 <SystemCoreClockUpdate+0xec>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	0d9b      	lsrs	r3, r3, #22
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021fe:	4b24      	ldr	r3, [pc, #144]	@ (8002290 <SystemCoreClockUpdate+0xec>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002206:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800220e:	4a23      	ldr	r2, [pc, #140]	@ (800229c <SystemCoreClockUpdate+0xf8>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4a1e      	ldr	r2, [pc, #120]	@ (8002290 <SystemCoreClockUpdate+0xec>)
 8002218:	6852      	ldr	r2, [r2, #4]
 800221a:	0992      	lsrs	r2, r2, #6
 800221c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e00b      	b.n	8002240 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <SystemCoreClockUpdate+0xf4>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <SystemCoreClockUpdate+0xec>)
 8002232:	6852      	ldr	r2, [r2, #4]
 8002234:	0992      	lsrs	r2, r2, #6
 8002236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002240:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <SystemCoreClockUpdate+0xec>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	3301      	adds	r3, #1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	fbb2 f3f3 	udiv	r3, r2, r3
 8002258:	4a0e      	ldr	r2, [pc, #56]	@ (8002294 <SystemCoreClockUpdate+0xf0>)
 800225a:	6013      	str	r3, [r2, #0]
      break;
 800225c:	e003      	b.n	8002266 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <SystemCoreClockUpdate+0xf0>)
 8002260:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <SystemCoreClockUpdate+0xf4>)
 8002262:	601a      	str	r2, [r3, #0]
      break;
 8002264:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <SystemCoreClockUpdate+0xec>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <SystemCoreClockUpdate+0xfc>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002276:	4b07      	ldr	r3, [pc, #28]	@ (8002294 <SystemCoreClockUpdate+0xf0>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <SystemCoreClockUpdate+0xf0>)
 8002282:	6013      	str	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40023800 	.word	0x40023800
 8002294:	20000000 	.word	0x20000000
 8002298:	00f42400 	.word	0x00f42400
 800229c:	007a1200 	.word	0x007a1200
 80022a0:	08003038 	.word	0x08003038

080022a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022a4:	480d      	ldr	r0, [pc, #52]	@ (80022dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022a8:	f7ff ff6a 	bl	8002180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022ac:	480c      	ldr	r0, [pc, #48]	@ (80022e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80022ae:	490d      	ldr	r1, [pc, #52]	@ (80022e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022b0:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <LoopForever+0xe>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b4:	e002      	b.n	80022bc <LoopCopyDataInit>

080022b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ba:	3304      	adds	r3, #4

080022bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c0:	d3f9      	bcc.n	80022b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022c2:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80022c4:	4c0a      	ldr	r4, [pc, #40]	@ (80022f0 <LoopForever+0x16>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c8:	e001      	b.n	80022ce <LoopFillZerobss>

080022ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022cc:	3204      	adds	r2, #4

080022ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d0:	d3fb      	bcc.n	80022ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022d2:	f000 fe05 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022d6:	f7ff ff2b 	bl	8002130 <main>

080022da <LoopForever>:

LoopForever:
  b LoopForever
 80022da:	e7fe      	b.n	80022da <LoopForever>
  ldr   r0, =_estack
 80022dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80022e8:	08003050 	.word	0x08003050
  ldr r2, =_sbss
 80022ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80022f0:	20000128 	.word	0x20000128

080022f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022f4:	e7fe      	b.n	80022f4 <ADC_IRQHandler>

080022f6 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	ed87 0b02 	vstr	d0, [r7, #8]
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8002304:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002308:	f7fe fbdc 	bl	8000ac4 <__aeabi_d2lz>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe f8e6 	bl	80004e4 <__aeabi_l2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	6839      	ldr	r1, [r7, #0]
 800231e:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800232c:	f7fd ff50 	bl	80001d0 <__aeabi_dsub>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	e9c1 2300 	strd	r2, r3, [r1]
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 800234a:	2200      	movs	r2, #0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8002350:	2200      	movs	r2, #0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 8002356:	2200      	movs	r2, #0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002362:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 8002364:	2203      	movs	r2, #3
 8002366:	2301      	movs	r3, #1
 8002368:	4313      	orrs	r3, r2
 800236a:	b2da      	uxtb	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8002370:	2300      	movs	r3, #0
 8002372:	b2da      	uxtb	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	749a      	strb	r2, [r3, #18]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a47      	ldr	r2, [pc, #284]	@ (80024b0 <USART_Clock_Enable+0x12c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d112      	bne.n	80023bc <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	4293      	cmp	r3, r2
 800239e:	d106      	bne.n	80023ae <USART_Clock_Enable+0x2a>
 80023a0:	4b44      	ldr	r3, [pc, #272]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023a4:	4a43      	ldr	r2, [pc, #268]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023a6:	f043 0310 	orr.w	r3, r3, #16
 80023aa:	6653      	str	r3, [r2, #100]	@ 0x64
 80023ac:	e079      	b.n	80024a2 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80023ae:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a40      	ldr	r2, [pc, #256]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023b4:	f043 0310 	orr.w	r3, r3, #16
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	e072      	b.n	80024a2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3d      	ldr	r2, [pc, #244]	@ (80024b8 <USART_Clock_Enable+0x134>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d112      	bne.n	80023ec <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	791b      	ldrb	r3, [r3, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d106      	bne.n	80023de <USART_Clock_Enable+0x5a>
 80023d0:	4b38      	ldr	r3, [pc, #224]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d4:	4a37      	ldr	r2, [pc, #220]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023da:	6613      	str	r3, [r2, #96]	@ 0x60
 80023dc:	e061      	b.n	80024a2 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80023de:	4b35      	ldr	r3, [pc, #212]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4a34      	ldr	r2, [pc, #208]	@ (80024b4 <USART_Clock_Enable+0x130>)
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ea:	e05a      	b.n	80024a2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a32      	ldr	r2, [pc, #200]	@ (80024bc <USART_Clock_Enable+0x138>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d112      	bne.n	800241c <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	791b      	ldrb	r3, [r3, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d106      	bne.n	800240e <USART_Clock_Enable+0x8a>
 8002400:	4b2c      	ldr	r3, [pc, #176]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002404:	4a2b      	ldr	r2, [pc, #172]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002406:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800240a:	6613      	str	r3, [r2, #96]	@ 0x60
 800240c:	e049      	b.n	80024a2 <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 800240e:	4b29      	ldr	r3, [pc, #164]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a28      	ldr	r2, [pc, #160]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
 800241a:	e042      	b.n	80024a2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a27      	ldr	r2, [pc, #156]	@ (80024c0 <USART_Clock_Enable+0x13c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10e      	bne.n	8002444 <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	4293      	cmp	r3, r2
 800242e:	d102      	bne.n	8002436 <USART_Clock_Enable+0xb2>
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
 8002434:	e036      	b.n	80024a4 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8002436:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <USART_Clock_Enable+0x130>)
 800243c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	e02e      	b.n	80024a2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1e      	ldr	r2, [pc, #120]	@ (80024c4 <USART_Clock_Enable+0x140>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10e      	bne.n	800246c <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	791b      	ldrb	r3, [r3, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	4293      	cmp	r3, r2
 8002456:	d102      	bne.n	800245e <USART_Clock_Enable+0xda>
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	e022      	b.n	80024a4 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002464:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002468:	6413      	str	r3, [r2, #64]	@ 0x40
 800246a:	e01a      	b.n	80024a2 <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a15      	ldr	r2, [pc, #84]	@ (80024c8 <USART_Clock_Enable+0x144>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d112      	bne.n	800249c <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	791b      	ldrb	r3, [r3, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	4293      	cmp	r3, r2
 800247e:	d106      	bne.n	800248e <USART_Clock_Enable+0x10a>
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002484:	4a0b      	ldr	r2, [pc, #44]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002486:	f043 0320 	orr.w	r3, r3, #32
 800248a:	6653      	str	r3, [r2, #100]	@ 0x64
 800248c:	e009      	b.n	80024a2 <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <USART_Clock_Enable+0x130>)
 8002494:	f043 0320 	orr.w	r3, r3, #32
 8002498:	6453      	str	r3, [r2, #68]	@ 0x44
 800249a:	e002      	b.n	80024a2 <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	e000      	b.n	80024a4 <USART_Clock_Enable+0x120>
	}
	return 1;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40004400 	.word	0x40004400
 80024bc:	40004800 	.word	0x40004800
 80024c0:	40004c00 	.word	0x40004c00
 80024c4:	40005000 	.word	0x40005000
 80024c8:	40011400 	.word	0x40011400

080024cc <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4aa0      	ldr	r2, [pc, #640]	@ (800275c <PIN_Setup+0x290>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 810d 	bne.w	80026fa <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7b1b      	ldrb	r3, [r3, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00f      	beq.n	800250a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7b1b      	ldrb	r3, [r3, #12]
 80024ee:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00a      	beq.n	800250a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7b1b      	ldrb	r3, [r3, #12]
 80024f8:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d005      	beq.n	800250a <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7b1b      	ldrb	r3, [r3, #12]
 8002502:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002504:	4293      	cmp	r3, r2
 8002506:	f040 80be 	bne.w	8002686 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7b5b      	ldrb	r3, [r3, #13]
 800250e:	2209      	movs	r2, #9
 8002510:	4293      	cmp	r3, r2
 8002512:	d10f      	bne.n	8002534 <PIN_Setup+0x68>
 8002514:	2009      	movs	r0, #9
 8002516:	2402      	movs	r4, #2
 8002518:	2500      	movs	r5, #0
 800251a:	2302      	movs	r3, #2
 800251c:	2200      	movs	r2, #0
 800251e:	2107      	movs	r1, #7
 8002520:	9102      	str	r1, [sp, #8]
 8002522:	9201      	str	r2, [sp, #4]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	462b      	mov	r3, r5
 8002528:	4622      	mov	r2, r4
 800252a:	4601      	mov	r1, r0
 800252c:	488c      	ldr	r0, [pc, #560]	@ (8002760 <PIN_Setup+0x294>)
 800252e:	f7fe fd33 	bl	8000f98 <GPIO_Pin_Init>
 8002532:	e013      	b.n	800255c <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7b5b      	ldrb	r3, [r3, #13]
 8002538:	2206      	movs	r2, #6
 800253a:	4293      	cmp	r3, r2
 800253c:	d10e      	bne.n	800255c <PIN_Setup+0x90>
 800253e:	2006      	movs	r0, #6
 8002540:	2402      	movs	r4, #2
 8002542:	2500      	movs	r5, #0
 8002544:	2302      	movs	r3, #2
 8002546:	2200      	movs	r2, #0
 8002548:	2107      	movs	r1, #7
 800254a:	9102      	str	r1, [sp, #8]
 800254c:	9201      	str	r2, [sp, #4]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	462b      	mov	r3, r5
 8002552:	4622      	mov	r2, r4
 8002554:	4601      	mov	r1, r0
 8002556:	4883      	ldr	r0, [pc, #524]	@ (8002764 <PIN_Setup+0x298>)
 8002558:	f7fe fd1e 	bl	8000f98 <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b9b      	ldrb	r3, [r3, #14]
 8002560:	220a      	movs	r2, #10
 8002562:	4293      	cmp	r3, r2
 8002564:	d10f      	bne.n	8002586 <PIN_Setup+0xba>
 8002566:	200a      	movs	r0, #10
 8002568:	2402      	movs	r4, #2
 800256a:	2500      	movs	r5, #0
 800256c:	2302      	movs	r3, #2
 800256e:	2200      	movs	r2, #0
 8002570:	2107      	movs	r1, #7
 8002572:	9102      	str	r1, [sp, #8]
 8002574:	9201      	str	r2, [sp, #4]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	462b      	mov	r3, r5
 800257a:	4622      	mov	r2, r4
 800257c:	4601      	mov	r1, r0
 800257e:	4878      	ldr	r0, [pc, #480]	@ (8002760 <PIN_Setup+0x294>)
 8002580:	f7fe fd0a 	bl	8000f98 <GPIO_Pin_Init>
 8002584:	e013      	b.n	80025ae <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7b9b      	ldrb	r3, [r3, #14]
 800258a:	2207      	movs	r2, #7
 800258c:	4293      	cmp	r3, r2
 800258e:	d10e      	bne.n	80025ae <PIN_Setup+0xe2>
 8002590:	2007      	movs	r0, #7
 8002592:	2402      	movs	r4, #2
 8002594:	2500      	movs	r5, #0
 8002596:	2302      	movs	r3, #2
 8002598:	2200      	movs	r2, #0
 800259a:	2107      	movs	r1, #7
 800259c:	9102      	str	r1, [sp, #8]
 800259e:	9201      	str	r2, [sp, #4]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	462b      	mov	r3, r5
 80025a4:	4622      	mov	r2, r4
 80025a6:	4601      	mov	r1, r0
 80025a8:	486e      	ldr	r0, [pc, #440]	@ (8002764 <PIN_Setup+0x298>)
 80025aa:	f7fe fcf5 	bl	8000f98 <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d113      	bne.n	80025e0 <PIN_Setup+0x114>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7bdb      	ldrb	r3, [r3, #15]
 80025bc:	2208      	movs	r2, #8
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10e      	bne.n	80025e0 <PIN_Setup+0x114>
 80025c2:	2008      	movs	r0, #8
 80025c4:	2402      	movs	r4, #2
 80025c6:	2500      	movs	r5, #0
 80025c8:	2302      	movs	r3, #2
 80025ca:	2200      	movs	r2, #0
 80025cc:	2107      	movs	r1, #7
 80025ce:	9102      	str	r1, [sp, #8]
 80025d0:	9201      	str	r2, [sp, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	462b      	mov	r3, r5
 80025d6:	4622      	mov	r2, r4
 80025d8:	4601      	mov	r1, r0
 80025da:	4861      	ldr	r0, [pc, #388]	@ (8002760 <PIN_Setup+0x294>)
 80025dc:	f7fe fcdc 	bl	8000f98 <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7cdb      	ldrb	r3, [r3, #19]
 80025e4:	2200      	movs	r2, #0
 80025e6:	4293      	cmp	r3, r2
 80025e8:	f000 83bb 	beq.w	8002d62 <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7cdb      	ldrb	r3, [r3, #19]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10e      	bne.n	8002614 <PIN_Setup+0x148>
 80025f6:	200b      	movs	r0, #11
 80025f8:	2402      	movs	r4, #2
 80025fa:	2500      	movs	r5, #0
 80025fc:	2302      	movs	r3, #2
 80025fe:	2200      	movs	r2, #0
 8002600:	2107      	movs	r1, #7
 8002602:	9102      	str	r1, [sp, #8]
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	462b      	mov	r3, r5
 800260a:	4622      	mov	r2, r4
 800260c:	4601      	mov	r1, r0
 800260e:	4854      	ldr	r0, [pc, #336]	@ (8002760 <PIN_Setup+0x294>)
 8002610:	f7fe fcc2 	bl	8000f98 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7cdb      	ldrb	r3, [r3, #19]
 8002618:	2202      	movs	r2, #2
 800261a:	4293      	cmp	r3, r2
 800261c:	d10e      	bne.n	800263c <PIN_Setup+0x170>
 800261e:	200c      	movs	r0, #12
 8002620:	2402      	movs	r4, #2
 8002622:	2500      	movs	r5, #0
 8002624:	2302      	movs	r3, #2
 8002626:	2200      	movs	r2, #0
 8002628:	2107      	movs	r1, #7
 800262a:	9102      	str	r1, [sp, #8]
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	462b      	mov	r3, r5
 8002632:	4622      	mov	r2, r4
 8002634:	4601      	mov	r1, r0
 8002636:	484a      	ldr	r0, [pc, #296]	@ (8002760 <PIN_Setup+0x294>)
 8002638:	f7fe fcae 	bl	8000f98 <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7cdb      	ldrb	r3, [r3, #19]
 8002640:	2203      	movs	r2, #3
 8002642:	4293      	cmp	r3, r2
 8002644:	f040 838d 	bne.w	8002d62 <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002648:	200b      	movs	r0, #11
 800264a:	2402      	movs	r4, #2
 800264c:	2500      	movs	r5, #0
 800264e:	2302      	movs	r3, #2
 8002650:	2200      	movs	r2, #0
 8002652:	2107      	movs	r1, #7
 8002654:	9102      	str	r1, [sp, #8]
 8002656:	9201      	str	r2, [sp, #4]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	462b      	mov	r3, r5
 800265c:	4622      	mov	r2, r4
 800265e:	4601      	mov	r1, r0
 8002660:	483f      	ldr	r0, [pc, #252]	@ (8002760 <PIN_Setup+0x294>)
 8002662:	f7fe fc99 	bl	8000f98 <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002666:	200c      	movs	r0, #12
 8002668:	2402      	movs	r4, #2
 800266a:	2500      	movs	r5, #0
 800266c:	2302      	movs	r3, #2
 800266e:	2200      	movs	r2, #0
 8002670:	2107      	movs	r1, #7
 8002672:	9102      	str	r1, [sp, #8]
 8002674:	9201      	str	r2, [sp, #4]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	462b      	mov	r3, r5
 800267a:	4622      	mov	r2, r4
 800267c:	4601      	mov	r1, r0
 800267e:	4838      	ldr	r0, [pc, #224]	@ (8002760 <PIN_Setup+0x294>)
 8002680:	f7fe fc8a 	bl	8000f98 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002684:	e36d      	b.n	8002d62 <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	7b1b      	ldrb	r3, [r3, #12]
 800268a:	2206      	movs	r2, #6
 800268c:	4293      	cmp	r3, r2
 800268e:	d00a      	beq.n	80026a6 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7b1b      	ldrb	r3, [r3, #12]
 8002694:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002696:	4293      	cmp	r3, r2
 8002698:	d005      	beq.n	80026a6 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7b1b      	ldrb	r3, [r3, #12]
 800269e:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 80026a0:	4293      	cmp	r3, r2
 80026a2:	f040 8363 	bne.w	8002d6c <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	7b5b      	ldrb	r3, [r3, #13]
 80026aa:	2209      	movs	r2, #9
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10e      	bne.n	80026ce <PIN_Setup+0x202>
 80026b0:	2009      	movs	r0, #9
 80026b2:	2402      	movs	r4, #2
 80026b4:	2500      	movs	r5, #0
 80026b6:	2302      	movs	r3, #2
 80026b8:	2200      	movs	r2, #0
 80026ba:	2107      	movs	r1, #7
 80026bc:	9102      	str	r1, [sp, #8]
 80026be:	9201      	str	r2, [sp, #4]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	462b      	mov	r3, r5
 80026c4:	4622      	mov	r2, r4
 80026c6:	4601      	mov	r1, r0
 80026c8:	4825      	ldr	r0, [pc, #148]	@ (8002760 <PIN_Setup+0x294>)
 80026ca:	f7fe fc65 	bl	8000f98 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7b1b      	ldrb	r3, [r3, #12]
 80026d2:	2207      	movs	r2, #7
 80026d4:	4293      	cmp	r3, r2
 80026d6:	f040 8349 	bne.w	8002d6c <PIN_Setup+0x8a0>
 80026da:	2008      	movs	r0, #8
 80026dc:	2402      	movs	r4, #2
 80026de:	2500      	movs	r5, #0
 80026e0:	2302      	movs	r3, #2
 80026e2:	2200      	movs	r2, #0
 80026e4:	2107      	movs	r1, #7
 80026e6:	9102      	str	r1, [sp, #8]
 80026e8:	9201      	str	r2, [sp, #4]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	462b      	mov	r3, r5
 80026ee:	4622      	mov	r2, r4
 80026f0:	4601      	mov	r1, r0
 80026f2:	481b      	ldr	r0, [pc, #108]	@ (8002760 <PIN_Setup+0x294>)
 80026f4:	f7fe fc50 	bl	8000f98 <GPIO_Pin_Init>
//
//		}
//	}


}
 80026f8:	e338      	b.n	8002d6c <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002768 <PIN_Setup+0x29c>)
 8002700:	4293      	cmp	r3, r2
 8002702:	f040 817b 	bne.w	80029fc <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	7b1b      	ldrb	r3, [r3, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	4293      	cmp	r3, r2
 800270e:	d00f      	beq.n	8002730 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7b1b      	ldrb	r3, [r3, #12]
 8002714:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002716:	4293      	cmp	r3, r2
 8002718:	d00a      	beq.n	8002730 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7b1b      	ldrb	r3, [r3, #12]
 800271e:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002720:	4293      	cmp	r3, r2
 8002722:	d005      	beq.n	8002730 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7b1b      	ldrb	r3, [r3, #12]
 8002728:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 800272a:	4293      	cmp	r3, r2
 800272c:	f040 80f8 	bne.w	8002920 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	7b5b      	ldrb	r3, [r3, #13]
 8002734:	2202      	movs	r2, #2
 8002736:	4293      	cmp	r3, r2
 8002738:	d118      	bne.n	800276c <PIN_Setup+0x2a0>
 800273a:	2002      	movs	r0, #2
 800273c:	2402      	movs	r4, #2
 800273e:	2500      	movs	r5, #0
 8002740:	2302      	movs	r3, #2
 8002742:	2200      	movs	r2, #0
 8002744:	2107      	movs	r1, #7
 8002746:	9102      	str	r1, [sp, #8]
 8002748:	9201      	str	r2, [sp, #4]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	462b      	mov	r3, r5
 800274e:	4622      	mov	r2, r4
 8002750:	4601      	mov	r1, r0
 8002752:	4803      	ldr	r0, [pc, #12]	@ (8002760 <PIN_Setup+0x294>)
 8002754:	f7fe fc20 	bl	8000f98 <GPIO_Pin_Init>
 8002758:	e01c      	b.n	8002794 <PIN_Setup+0x2c8>
 800275a:	bf00      	nop
 800275c:	40011000 	.word	0x40011000
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7b5b      	ldrb	r3, [r3, #13]
 8002770:	2205      	movs	r2, #5
 8002772:	4293      	cmp	r3, r2
 8002774:	d10e      	bne.n	8002794 <PIN_Setup+0x2c8>
 8002776:	2005      	movs	r0, #5
 8002778:	2402      	movs	r4, #2
 800277a:	2500      	movs	r5, #0
 800277c:	2302      	movs	r3, #2
 800277e:	2200      	movs	r2, #0
 8002780:	2107      	movs	r1, #7
 8002782:	9102      	str	r1, [sp, #8]
 8002784:	9201      	str	r2, [sp, #4]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	462b      	mov	r3, r5
 800278a:	4622      	mov	r2, r4
 800278c:	4601      	mov	r1, r0
 800278e:	4899      	ldr	r0, [pc, #612]	@ (80029f4 <PIN_Setup+0x528>)
 8002790:	f7fe fc02 	bl	8000f98 <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7b9b      	ldrb	r3, [r3, #14]
 8002798:	2203      	movs	r2, #3
 800279a:	4293      	cmp	r3, r2
 800279c:	d10f      	bne.n	80027be <PIN_Setup+0x2f2>
 800279e:	2003      	movs	r0, #3
 80027a0:	2402      	movs	r4, #2
 80027a2:	2500      	movs	r5, #0
 80027a4:	2302      	movs	r3, #2
 80027a6:	2200      	movs	r2, #0
 80027a8:	2107      	movs	r1, #7
 80027aa:	9102      	str	r1, [sp, #8]
 80027ac:	9201      	str	r2, [sp, #4]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	462b      	mov	r3, r5
 80027b2:	4622      	mov	r2, r4
 80027b4:	4601      	mov	r1, r0
 80027b6:	4890      	ldr	r0, [pc, #576]	@ (80029f8 <PIN_Setup+0x52c>)
 80027b8:	f7fe fbee 	bl	8000f98 <GPIO_Pin_Init>
 80027bc:	e013      	b.n	80027e6 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7b9b      	ldrb	r3, [r3, #14]
 80027c2:	2206      	movs	r2, #6
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10e      	bne.n	80027e6 <PIN_Setup+0x31a>
 80027c8:	2006      	movs	r0, #6
 80027ca:	2402      	movs	r4, #2
 80027cc:	2500      	movs	r5, #0
 80027ce:	2302      	movs	r3, #2
 80027d0:	2200      	movs	r2, #0
 80027d2:	2107      	movs	r1, #7
 80027d4:	9102      	str	r1, [sp, #8]
 80027d6:	9201      	str	r2, [sp, #4]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	462b      	mov	r3, r5
 80027dc:	4622      	mov	r2, r4
 80027de:	4601      	mov	r1, r0
 80027e0:	4884      	ldr	r0, [pc, #528]	@ (80029f4 <PIN_Setup+0x528>)
 80027e2:	f7fe fbd9 	bl	8000f98 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	7b1b      	ldrb	r3, [r3, #12]
 80027ea:	2202      	movs	r2, #2
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d128      	bne.n	8002842 <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7bdb      	ldrb	r3, [r3, #15]
 80027f4:	2204      	movs	r2, #4
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10f      	bne.n	800281a <PIN_Setup+0x34e>
 80027fa:	2004      	movs	r0, #4
 80027fc:	2402      	movs	r4, #2
 80027fe:	2500      	movs	r5, #0
 8002800:	2302      	movs	r3, #2
 8002802:	2200      	movs	r2, #0
 8002804:	2107      	movs	r1, #7
 8002806:	9102      	str	r1, [sp, #8]
 8002808:	9201      	str	r2, [sp, #4]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	462b      	mov	r3, r5
 800280e:	4622      	mov	r2, r4
 8002810:	4601      	mov	r1, r0
 8002812:	4879      	ldr	r0, [pc, #484]	@ (80029f8 <PIN_Setup+0x52c>)
 8002814:	f7fe fbc0 	bl	8000f98 <GPIO_Pin_Init>
 8002818:	e013      	b.n	8002842 <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7bdb      	ldrb	r3, [r3, #15]
 800281e:	2207      	movs	r2, #7
 8002820:	4293      	cmp	r3, r2
 8002822:	d10e      	bne.n	8002842 <PIN_Setup+0x376>
 8002824:	2007      	movs	r0, #7
 8002826:	2402      	movs	r4, #2
 8002828:	2500      	movs	r5, #0
 800282a:	2302      	movs	r3, #2
 800282c:	2200      	movs	r2, #0
 800282e:	2107      	movs	r1, #7
 8002830:	9102      	str	r1, [sp, #8]
 8002832:	9201      	str	r2, [sp, #4]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	462b      	mov	r3, r5
 8002838:	4622      	mov	r2, r4
 800283a:	4601      	mov	r1, r0
 800283c:	486e      	ldr	r0, [pc, #440]	@ (80029f8 <PIN_Setup+0x52c>)
 800283e:	f7fe fbab 	bl	8000f98 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7cdb      	ldrb	r3, [r3, #19]
 8002846:	2200      	movs	r2, #0
 8002848:	4293      	cmp	r3, r2
 800284a:	d105      	bne.n	8002858 <PIN_Setup+0x38c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7cdb      	ldrb	r3, [r3, #19]
 8002850:	2203      	movs	r2, #3
 8002852:	4293      	cmp	r3, r2
 8002854:	f040 8287 	bne.w	8002d66 <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7cdb      	ldrb	r3, [r3, #19]
 800285c:	2201      	movs	r2, #1
 800285e:	4293      	cmp	r3, r2
 8002860:	d128      	bne.n	80028b4 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7bdb      	ldrb	r3, [r3, #15]
 8002866:	2200      	movs	r2, #0
 8002868:	4293      	cmp	r3, r2
 800286a:	d10f      	bne.n	800288c <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800286c:	2000      	movs	r0, #0
 800286e:	2402      	movs	r4, #2
 8002870:	2500      	movs	r5, #0
 8002872:	2302      	movs	r3, #2
 8002874:	2200      	movs	r2, #0
 8002876:	2107      	movs	r1, #7
 8002878:	9102      	str	r1, [sp, #8]
 800287a:	9201      	str	r2, [sp, #4]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	462b      	mov	r3, r5
 8002880:	4622      	mov	r2, r4
 8002882:	4601      	mov	r1, r0
 8002884:	485c      	ldr	r0, [pc, #368]	@ (80029f8 <PIN_Setup+0x52c>)
 8002886:	f7fe fb87 	bl	8000f98 <GPIO_Pin_Init>
 800288a:	e013      	b.n	80028b4 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7bdb      	ldrb	r3, [r3, #15]
 8002890:	2203      	movs	r2, #3
 8002892:	4293      	cmp	r3, r2
 8002894:	d10e      	bne.n	80028b4 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002896:	2003      	movs	r0, #3
 8002898:	2402      	movs	r4, #2
 800289a:	2500      	movs	r5, #0
 800289c:	2302      	movs	r3, #2
 800289e:	2200      	movs	r2, #0
 80028a0:	2107      	movs	r1, #7
 80028a2:	9102      	str	r1, [sp, #8]
 80028a4:	9201      	str	r2, [sp, #4]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	462b      	mov	r3, r5
 80028aa:	4622      	mov	r2, r4
 80028ac:	4601      	mov	r1, r0
 80028ae:	4851      	ldr	r0, [pc, #324]	@ (80029f4 <PIN_Setup+0x528>)
 80028b0:	f7fe fb72 	bl	8000f98 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7cdb      	ldrb	r3, [r3, #19]
 80028b8:	2202      	movs	r2, #2
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d005      	beq.n	80028ca <PIN_Setup+0x3fe>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7cdb      	ldrb	r3, [r3, #19]
 80028c2:	2203      	movs	r2, #3
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f040 824e 	bne.w	8002d66 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7bdb      	ldrb	r3, [r3, #15]
 80028ce:	2201      	movs	r2, #1
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10f      	bne.n	80028f4 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80028d4:	2001      	movs	r0, #1
 80028d6:	2402      	movs	r4, #2
 80028d8:	2500      	movs	r5, #0
 80028da:	2302      	movs	r3, #2
 80028dc:	2200      	movs	r2, #0
 80028de:	2107      	movs	r1, #7
 80028e0:	9102      	str	r1, [sp, #8]
 80028e2:	9201      	str	r2, [sp, #4]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	462b      	mov	r3, r5
 80028e8:	4622      	mov	r2, r4
 80028ea:	4601      	mov	r1, r0
 80028ec:	4842      	ldr	r0, [pc, #264]	@ (80029f8 <PIN_Setup+0x52c>)
 80028ee:	f7fe fb53 	bl	8000f98 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80028f2:	e238      	b.n	8002d66 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7bdb      	ldrb	r3, [r3, #15]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f040 8233 	bne.w	8002d66 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002900:	2004      	movs	r0, #4
 8002902:	2402      	movs	r4, #2
 8002904:	2500      	movs	r5, #0
 8002906:	2302      	movs	r3, #2
 8002908:	2200      	movs	r2, #0
 800290a:	2107      	movs	r1, #7
 800290c:	9102      	str	r1, [sp, #8]
 800290e:	9201      	str	r2, [sp, #4]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	462b      	mov	r3, r5
 8002914:	4622      	mov	r2, r4
 8002916:	4601      	mov	r1, r0
 8002918:	4836      	ldr	r0, [pc, #216]	@ (80029f4 <PIN_Setup+0x528>)
 800291a:	f7fe fb3d 	bl	8000f98 <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800291e:	e222      	b.n	8002d66 <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7b1b      	ldrb	r3, [r3, #12]
 8002924:	2206      	movs	r2, #6
 8002926:	4293      	cmp	r3, r2
 8002928:	d00a      	beq.n	8002940 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7b1b      	ldrb	r3, [r3, #12]
 800292e:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002930:	4293      	cmp	r3, r2
 8002932:	d005      	beq.n	8002940 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7b1b      	ldrb	r3, [r3, #12]
 8002938:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800293a:	4293      	cmp	r3, r2
 800293c:	f040 8216 	bne.w	8002d6c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7b5b      	ldrb	r3, [r3, #13]
 8002944:	2202      	movs	r2, #2
 8002946:	4293      	cmp	r3, r2
 8002948:	d10f      	bne.n	800296a <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 800294a:	2002      	movs	r0, #2
 800294c:	2402      	movs	r4, #2
 800294e:	2500      	movs	r5, #0
 8002950:	2302      	movs	r3, #2
 8002952:	2200      	movs	r2, #0
 8002954:	2107      	movs	r1, #7
 8002956:	9102      	str	r1, [sp, #8]
 8002958:	9201      	str	r2, [sp, #4]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	462b      	mov	r3, r5
 800295e:	4622      	mov	r2, r4
 8002960:	4601      	mov	r1, r0
 8002962:	4825      	ldr	r0, [pc, #148]	@ (80029f8 <PIN_Setup+0x52c>)
 8002964:	f7fe fb18 	bl	8000f98 <GPIO_Pin_Init>
 8002968:	e013      	b.n	8002992 <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7b5b      	ldrb	r3, [r3, #13]
 800296e:	2205      	movs	r2, #5
 8002970:	4293      	cmp	r3, r2
 8002972:	d10e      	bne.n	8002992 <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002974:	2005      	movs	r0, #5
 8002976:	2402      	movs	r4, #2
 8002978:	2500      	movs	r5, #0
 800297a:	2302      	movs	r3, #2
 800297c:	2200      	movs	r2, #0
 800297e:	2107      	movs	r1, #7
 8002980:	9102      	str	r1, [sp, #8]
 8002982:	9201      	str	r2, [sp, #4]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	462b      	mov	r3, r5
 8002988:	4622      	mov	r2, r4
 800298a:	4601      	mov	r1, r0
 800298c:	4819      	ldr	r0, [pc, #100]	@ (80029f4 <PIN_Setup+0x528>)
 800298e:	f7fe fb03 	bl	8000f98 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7b1b      	ldrb	r3, [r3, #12]
 8002996:	2207      	movs	r2, #7
 8002998:	4293      	cmp	r3, r2
 800299a:	f040 81e7 	bne.w	8002d6c <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7bdb      	ldrb	r3, [r3, #15]
 80029a2:	2204      	movs	r2, #4
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10f      	bne.n	80029c8 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80029a8:	2004      	movs	r0, #4
 80029aa:	2402      	movs	r4, #2
 80029ac:	2500      	movs	r5, #0
 80029ae:	2302      	movs	r3, #2
 80029b0:	2200      	movs	r2, #0
 80029b2:	2107      	movs	r1, #7
 80029b4:	9102      	str	r1, [sp, #8]
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	462b      	mov	r3, r5
 80029bc:	4622      	mov	r2, r4
 80029be:	4601      	mov	r1, r0
 80029c0:	480d      	ldr	r0, [pc, #52]	@ (80029f8 <PIN_Setup+0x52c>)
 80029c2:	f7fe fae9 	bl	8000f98 <GPIO_Pin_Init>
}
 80029c6:	e1d1      	b.n	8002d6c <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	7bdb      	ldrb	r3, [r3, #15]
 80029cc:	2207      	movs	r2, #7
 80029ce:	4293      	cmp	r3, r2
 80029d0:	f040 81cc 	bne.w	8002d6c <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80029d4:	2007      	movs	r0, #7
 80029d6:	2402      	movs	r4, #2
 80029d8:	2500      	movs	r5, #0
 80029da:	2302      	movs	r3, #2
 80029dc:	2200      	movs	r2, #0
 80029de:	2107      	movs	r1, #7
 80029e0:	9102      	str	r1, [sp, #8]
 80029e2:	9201      	str	r2, [sp, #4]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	462b      	mov	r3, r5
 80029e8:	4622      	mov	r2, r4
 80029ea:	4601      	mov	r1, r0
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <PIN_Setup+0x52c>)
 80029ee:	f7fe fad3 	bl	8000f98 <GPIO_Pin_Init>
}
 80029f2:	e1bb      	b.n	8002d6c <PIN_Setup+0x8a0>
 80029f4:	40020c00 	.word	0x40020c00
 80029f8:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4aaa      	ldr	r2, [pc, #680]	@ (8002cac <PIN_Setup+0x7e0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	f040 81b2 	bne.w	8002d6c <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00f      	beq.n	8002a32 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	7b1b      	ldrb	r3, [r3, #12]
 8002a16:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00a      	beq.n	8002a32 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7b1b      	ldrb	r3, [r3, #12]
 8002a20:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d005      	beq.n	8002a32 <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7b1b      	ldrb	r3, [r3, #12]
 8002a2a:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	f040 8119 	bne.w	8002c64 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7b5b      	ldrb	r3, [r3, #13]
 8002a36:	220b      	movs	r2, #11
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d10f      	bne.n	8002a5c <PIN_Setup+0x590>
 8002a3c:	200b      	movs	r0, #11
 8002a3e:	2402      	movs	r4, #2
 8002a40:	2500      	movs	r5, #0
 8002a42:	2302      	movs	r3, #2
 8002a44:	2200      	movs	r2, #0
 8002a46:	2107      	movs	r1, #7
 8002a48:	9102      	str	r1, [sp, #8]
 8002a4a:	9201      	str	r2, [sp, #4]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	462b      	mov	r3, r5
 8002a50:	4622      	mov	r2, r4
 8002a52:	4601      	mov	r1, r0
 8002a54:	4896      	ldr	r0, [pc, #600]	@ (8002cb0 <PIN_Setup+0x7e4>)
 8002a56:	f7fe fa9f 	bl	8000f98 <GPIO_Pin_Init>
 8002a5a:	e028      	b.n	8002aae <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7b5b      	ldrb	r3, [r3, #13]
 8002a60:	220a      	movs	r2, #10
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10f      	bne.n	8002a86 <PIN_Setup+0x5ba>
 8002a66:	200a      	movs	r0, #10
 8002a68:	2402      	movs	r4, #2
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2107      	movs	r1, #7
 8002a72:	9102      	str	r1, [sp, #8]
 8002a74:	9201      	str	r2, [sp, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	462b      	mov	r3, r5
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	488d      	ldr	r0, [pc, #564]	@ (8002cb4 <PIN_Setup+0x7e8>)
 8002a80:	f7fe fa8a 	bl	8000f98 <GPIO_Pin_Init>
 8002a84:	e013      	b.n	8002aae <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7b5b      	ldrb	r3, [r3, #13]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10e      	bne.n	8002aae <PIN_Setup+0x5e2>
 8002a90:	2008      	movs	r0, #8
 8002a92:	2402      	movs	r4, #2
 8002a94:	2500      	movs	r5, #0
 8002a96:	2302      	movs	r3, #2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2107      	movs	r1, #7
 8002a9c:	9102      	str	r1, [sp, #8]
 8002a9e:	9201      	str	r2, [sp, #4]
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	462b      	mov	r3, r5
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	4882      	ldr	r0, [pc, #520]	@ (8002cb4 <PIN_Setup+0x7e8>)
 8002aaa:	f7fe fa75 	bl	8000f98 <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7b9b      	ldrb	r3, [r3, #14]
 8002ab2:	220a      	movs	r2, #10
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10f      	bne.n	8002ad8 <PIN_Setup+0x60c>
 8002ab8:	200a      	movs	r0, #10
 8002aba:	2402      	movs	r4, #2
 8002abc:	2500      	movs	r5, #0
 8002abe:	2302      	movs	r3, #2
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2107      	movs	r1, #7
 8002ac4:	9102      	str	r1, [sp, #8]
 8002ac6:	9201      	str	r2, [sp, #4]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	462b      	mov	r3, r5
 8002acc:	4622      	mov	r2, r4
 8002ace:	4601      	mov	r1, r0
 8002ad0:	4877      	ldr	r0, [pc, #476]	@ (8002cb0 <PIN_Setup+0x7e4>)
 8002ad2:	f7fe fa61 	bl	8000f98 <GPIO_Pin_Init>
 8002ad6:	e028      	b.n	8002b2a <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7b9b      	ldrb	r3, [r3, #14]
 8002adc:	220b      	movs	r2, #11
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10f      	bne.n	8002b02 <PIN_Setup+0x636>
 8002ae2:	200b      	movs	r0, #11
 8002ae4:	2402      	movs	r4, #2
 8002ae6:	2500      	movs	r5, #0
 8002ae8:	2302      	movs	r3, #2
 8002aea:	2200      	movs	r2, #0
 8002aec:	2107      	movs	r1, #7
 8002aee:	9102      	str	r1, [sp, #8]
 8002af0:	9201      	str	r2, [sp, #4]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	462b      	mov	r3, r5
 8002af6:	4622      	mov	r2, r4
 8002af8:	4601      	mov	r1, r0
 8002afa:	486e      	ldr	r0, [pc, #440]	@ (8002cb4 <PIN_Setup+0x7e8>)
 8002afc:	f7fe fa4c 	bl	8000f98 <GPIO_Pin_Init>
 8002b00:	e013      	b.n	8002b2a <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7b5b      	ldrb	r3, [r3, #13]
 8002b06:	2208      	movs	r2, #8
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d10e      	bne.n	8002b2a <PIN_Setup+0x65e>
 8002b0c:	2008      	movs	r0, #8
 8002b0e:	2402      	movs	r4, #2
 8002b10:	2500      	movs	r5, #0
 8002b12:	2302      	movs	r3, #2
 8002b14:	2200      	movs	r2, #0
 8002b16:	2107      	movs	r1, #7
 8002b18:	9102      	str	r1, [sp, #8]
 8002b1a:	9201      	str	r2, [sp, #4]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	462b      	mov	r3, r5
 8002b20:	4622      	mov	r2, r4
 8002b22:	4601      	mov	r1, r0
 8002b24:	4863      	ldr	r0, [pc, #396]	@ (8002cb4 <PIN_Setup+0x7e8>)
 8002b26:	f7fe fa37 	bl	8000f98 <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7b1b      	ldrb	r3, [r3, #12]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d128      	bne.n	8002b86 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7bdb      	ldrb	r3, [r3, #15]
 8002b38:	220c      	movs	r2, #12
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10f      	bne.n	8002b5e <PIN_Setup+0x692>
 8002b3e:	200c      	movs	r0, #12
 8002b40:	2402      	movs	r4, #2
 8002b42:	2500      	movs	r5, #0
 8002b44:	2302      	movs	r3, #2
 8002b46:	2200      	movs	r2, #0
 8002b48:	2107      	movs	r1, #7
 8002b4a:	9102      	str	r1, [sp, #8]
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	462b      	mov	r3, r5
 8002b52:	4622      	mov	r2, r4
 8002b54:	4601      	mov	r1, r0
 8002b56:	4857      	ldr	r0, [pc, #348]	@ (8002cb4 <PIN_Setup+0x7e8>)
 8002b58:	f7fe fa1e 	bl	8000f98 <GPIO_Pin_Init>
 8002b5c:	e013      	b.n	8002b86 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7bdb      	ldrb	r3, [r3, #15]
 8002b62:	220a      	movs	r2, #10
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d10e      	bne.n	8002b86 <PIN_Setup+0x6ba>
 8002b68:	200a      	movs	r0, #10
 8002b6a:	2402      	movs	r4, #2
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	2302      	movs	r3, #2
 8002b70:	2200      	movs	r2, #0
 8002b72:	2107      	movs	r1, #7
 8002b74:	9102      	str	r1, [sp, #8]
 8002b76:	9201      	str	r2, [sp, #4]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	462b      	mov	r3, r5
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	4601      	mov	r1, r0
 8002b80:	484d      	ldr	r0, [pc, #308]	@ (8002cb8 <PIN_Setup+0x7ec>)
 8002b82:	f7fe fa09 	bl	8000f98 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7cdb      	ldrb	r3, [r3, #19]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	f000 80ec 	beq.w	8002d6a <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7cdb      	ldrb	r3, [r3, #19]
 8002b96:	2201      	movs	r2, #1
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d004      	beq.n	8002ba6 <PIN_Setup+0x6da>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	7cdb      	ldrb	r3, [r3, #19]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d128      	bne.n	8002bf8 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7bdb      	ldrb	r3, [r3, #15]
 8002baa:	2200      	movs	r2, #0
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10f      	bne.n	8002bd0 <PIN_Setup+0x704>
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	2402      	movs	r4, #2
 8002bb4:	2500      	movs	r5, #0
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2107      	movs	r1, #7
 8002bbc:	9102      	str	r1, [sp, #8]
 8002bbe:	9201      	str	r2, [sp, #4]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	4622      	mov	r2, r4
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	483a      	ldr	r0, [pc, #232]	@ (8002cb4 <PIN_Setup+0x7e8>)
 8002bca:	f7fe f9e5 	bl	8000f98 <GPIO_Pin_Init>
 8002bce:	e013      	b.n	8002bf8 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7bdb      	ldrb	r3, [r3, #15]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10e      	bne.n	8002bf8 <PIN_Setup+0x72c>
 8002bda:	2003      	movs	r0, #3
 8002bdc:	2402      	movs	r4, #2
 8002bde:	2500      	movs	r5, #0
 8002be0:	2302      	movs	r3, #2
 8002be2:	2200      	movs	r2, #0
 8002be4:	2107      	movs	r1, #7
 8002be6:	9102      	str	r1, [sp, #8]
 8002be8:	9201      	str	r2, [sp, #4]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	462b      	mov	r3, r5
 8002bee:	4622      	mov	r2, r4
 8002bf0:	4601      	mov	r1, r0
 8002bf2:	4831      	ldr	r0, [pc, #196]	@ (8002cb8 <PIN_Setup+0x7ec>)
 8002bf4:	f7fe f9d0 	bl	8000f98 <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7cdb      	ldrb	r3, [r3, #19]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d005      	beq.n	8002c0e <PIN_Setup+0x742>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7cdb      	ldrb	r3, [r3, #19]
 8002c06:	2203      	movs	r2, #3
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	f040 80ae 	bne.w	8002d6a <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7bdb      	ldrb	r3, [r3, #15]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d10f      	bne.n	8002c38 <PIN_Setup+0x76c>
 8002c18:	2001      	movs	r0, #1
 8002c1a:	2402      	movs	r4, #2
 8002c1c:	2500      	movs	r5, #0
 8002c1e:	2302      	movs	r3, #2
 8002c20:	2200      	movs	r2, #0
 8002c22:	2107      	movs	r1, #7
 8002c24:	9102      	str	r1, [sp, #8]
 8002c26:	9201      	str	r2, [sp, #4]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	4601      	mov	r1, r0
 8002c30:	4820      	ldr	r0, [pc, #128]	@ (8002cb4 <PIN_Setup+0x7e8>)
 8002c32:	f7fe f9b1 	bl	8000f98 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002c36:	e098      	b.n	8002d6a <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	7bdb      	ldrb	r3, [r3, #15]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	f040 8093 	bne.w	8002d6a <PIN_Setup+0x89e>
 8002c44:	2004      	movs	r0, #4
 8002c46:	2402      	movs	r4, #2
 8002c48:	2500      	movs	r5, #0
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2107      	movs	r1, #7
 8002c50:	9102      	str	r1, [sp, #8]
 8002c52:	9201      	str	r2, [sp, #4]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	462b      	mov	r3, r5
 8002c58:	4622      	mov	r2, r4
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	4816      	ldr	r0, [pc, #88]	@ (8002cb8 <PIN_Setup+0x7ec>)
 8002c5e:	f7fe f99b 	bl	8000f98 <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002c62:	e082      	b.n	8002d6a <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7b1b      	ldrb	r3, [r3, #12]
 8002c68:	2206      	movs	r2, #6
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d009      	beq.n	8002c82 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7b1b      	ldrb	r3, [r3, #12]
 8002c72:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7b1b      	ldrb	r3, [r3, #12]
 8002c7c:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d174      	bne.n	8002d6c <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7b5b      	ldrb	r3, [r3, #13]
 8002c86:	220b      	movs	r2, #11
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d117      	bne.n	8002cbc <PIN_Setup+0x7f0>
 8002c8c:	200b      	movs	r0, #11
 8002c8e:	2402      	movs	r4, #2
 8002c90:	2500      	movs	r5, #0
 8002c92:	2302      	movs	r3, #2
 8002c94:	2200      	movs	r2, #0
 8002c96:	2107      	movs	r1, #7
 8002c98:	9102      	str	r1, [sp, #8]
 8002c9a:	9201      	str	r2, [sp, #4]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	462b      	mov	r3, r5
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <PIN_Setup+0x7e4>)
 8002ca6:	f7fe f977 	bl	8000f98 <GPIO_Pin_Init>
 8002caa:	e030      	b.n	8002d0e <PIN_Setup+0x842>
 8002cac:	40004800 	.word	0x40004800
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7b5b      	ldrb	r3, [r3, #13]
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d10f      	bne.n	8002ce6 <PIN_Setup+0x81a>
 8002cc6:	200a      	movs	r0, #10
 8002cc8:	2402      	movs	r4, #2
 8002cca:	2500      	movs	r5, #0
 8002ccc:	2302      	movs	r3, #2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2107      	movs	r1, #7
 8002cd2:	9102      	str	r1, [sp, #8]
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	462b      	mov	r3, r5
 8002cda:	4622      	mov	r2, r4
 8002cdc:	4601      	mov	r1, r0
 8002cde:	4825      	ldr	r0, [pc, #148]	@ (8002d74 <PIN_Setup+0x8a8>)
 8002ce0:	f7fe f95a 	bl	8000f98 <GPIO_Pin_Init>
 8002ce4:	e013      	b.n	8002d0e <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7b5b      	ldrb	r3, [r3, #13]
 8002cea:	2208      	movs	r2, #8
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10e      	bne.n	8002d0e <PIN_Setup+0x842>
 8002cf0:	2008      	movs	r0, #8
 8002cf2:	2402      	movs	r4, #2
 8002cf4:	2500      	movs	r5, #0
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2107      	movs	r1, #7
 8002cfc:	9102      	str	r1, [sp, #8]
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	462b      	mov	r3, r5
 8002d04:	4622      	mov	r2, r4
 8002d06:	4601      	mov	r1, r0
 8002d08:	481a      	ldr	r0, [pc, #104]	@ (8002d74 <PIN_Setup+0x8a8>)
 8002d0a:	f7fe f945 	bl	8000f98 <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7bdb      	ldrb	r3, [r3, #15]
 8002d12:	220c      	movs	r2, #12
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10f      	bne.n	8002d38 <PIN_Setup+0x86c>
 8002d18:	200c      	movs	r0, #12
 8002d1a:	2402      	movs	r4, #2
 8002d1c:	2500      	movs	r5, #0
 8002d1e:	2302      	movs	r3, #2
 8002d20:	2200      	movs	r2, #0
 8002d22:	2107      	movs	r1, #7
 8002d24:	9102      	str	r1, [sp, #8]
 8002d26:	9201      	str	r2, [sp, #4]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4810      	ldr	r0, [pc, #64]	@ (8002d74 <PIN_Setup+0x8a8>)
 8002d32:	f7fe f931 	bl	8000f98 <GPIO_Pin_Init>
}
 8002d36:	e019      	b.n	8002d6c <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7bdb      	ldrb	r3, [r3, #15]
 8002d3c:	220a      	movs	r2, #10
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d114      	bne.n	8002d6c <PIN_Setup+0x8a0>
 8002d42:	200a      	movs	r0, #10
 8002d44:	2402      	movs	r4, #2
 8002d46:	2500      	movs	r5, #0
 8002d48:	2302      	movs	r3, #2
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2107      	movs	r1, #7
 8002d4e:	9102      	str	r1, [sp, #8]
 8002d50:	9201      	str	r2, [sp, #4]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	462b      	mov	r3, r5
 8002d56:	4622      	mov	r2, r4
 8002d58:	4601      	mov	r1, r0
 8002d5a:	4807      	ldr	r0, [pc, #28]	@ (8002d78 <PIN_Setup+0x8ac>)
 8002d5c:	f7fe f91c 	bl	8000f98 <GPIO_Pin_Init>
}
 8002d60:	e004      	b.n	8002d6c <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002d6a:	bf00      	nop
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bdb0      	pop	{r4, r5, r7, pc}
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	00000000 	.word	0x00000000

08002d80 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff fafb 	bl	8002384 <USART_Clock_Enable>
	PIN_Setup(config);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fb9c 	bl	80024cc <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fb57 	bl	800044c <__aeabi_ui2d>
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed8 <USART_Init+0x158>)
 8002da4:	f7fd fbcc 	bl	8000540 <__aeabi_dmul>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	a148      	add	r1, pc, #288	@ (adr r1, 8002ed0 <USART_Init+0x150>)
 8002dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002db2:	f7fd fcef 	bl	8000794 <__aeabi_ddiv>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 8002dbe:	f107 0208 	add.w	r2, r7, #8
 8002dc2:	f107 0310 	add.w	r3, r7, #16
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	ed97 0b08 	vldr	d0, [r7, #32]
 8002dce:	f7ff fa92 	bl	80022f6 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 8002dd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	4b40      	ldr	r3, [pc, #256]	@ (8002edc <USART_Init+0x15c>)
 8002ddc:	f7fd fbb0 	bl	8000540 <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	ec43 2b17 	vmov	d7, r2, r3
 8002de8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dec:	eef0 0a67 	vmov.f32	s1, s15
 8002df0:	f000 f89a 	bl	8002f28 <ceil>
 8002df4:	ec53 2b10 	vmov	r2, r3, d0
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd fe3a 	bl	8000a74 <__aeabi_d2iz>
 8002e00:	4603      	mov	r3, r0
 8002e02:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 8002e04:	ed97 7b02 	vldr	d7, [r7, #8]
 8002e08:	eeb0 0a47 	vmov.f32	s0, s14
 8002e0c:	eef0 0a67 	vmov.f32	s1, s15
 8002e10:	f000 f88a 	bl	8002f28 <ceil>
 8002e14:	ec53 2b10 	vmov	r2, r3, d0
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7fd fe2a 	bl	8000a74 <__aeabi_d2iz>
 8002e20:	4603      	mov	r3, r0
 8002e22:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e32:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	011a      	lsls	r2, r3, #4
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7d9b      	ldrb	r3, [r3, #22]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7c9b      	ldrb	r3, [r3, #18]
 8002e60:	4619      	mov	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7d1b      	ldrb	r3, [r3, #20]
 8002e74:	4619      	mov	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7b1b      	ldrb	r3, [r3, #12]
 8002e82:	2203      	movs	r2, #3
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d107      	bne.n	8002e98 <USART_Init+0x118>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0208 	orr.w	r2, r2, #8
 8002e96:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7b1b      	ldrb	r3, [r3, #12]
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d107      	bne.n	8002eb2 <USART_Init+0x132>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eb0:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 020c 	orr.w	r2, r2, #12
 8002ec0:	60da      	str	r2, [r3, #12]

	return 1;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3728      	adds	r7, #40	@ 0x28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	41a406f4 	.word	0x41a406f4
 8002ed8:	40400000 	.word	0x40400000
 8002edc:	40300000 	.word	0x40300000

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8002f18 <__libc_init_array+0x38>)
 8002ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8002f1c <__libc_init_array+0x3c>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	2600      	movs	r6, #0
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8002f20 <__libc_init_array+0x40>)
 8002ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8002f24 <__libc_init_array+0x44>)
 8002ef4:	f000 f894 	bl	8003020 <_init>
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	2600      	movs	r6, #0
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	08003048 	.word	0x08003048
 8002f1c:	08003048 	.word	0x08003048
 8002f20:	08003048 	.word	0x08003048
 8002f24:	0800304c 	.word	0x0800304c

08002f28 <ceil>:
 8002f28:	ec51 0b10 	vmov	r0, r1, d0
 8002f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f34:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8002f38:	2e13      	cmp	r6, #19
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4605      	mov	r5, r0
 8002f3e:	4680      	mov	r8, r0
 8002f40:	dc2e      	bgt.n	8002fa0 <ceil+0x78>
 8002f42:	2e00      	cmp	r6, #0
 8002f44:	da11      	bge.n	8002f6a <ceil+0x42>
 8002f46:	a332      	add	r3, pc, #200	@ (adr r3, 8003010 <ceil+0xe8>)
 8002f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4c:	f7fd f942 	bl	80001d4 <__adddf3>
 8002f50:	2200      	movs	r2, #0
 8002f52:	2300      	movs	r3, #0
 8002f54:	f7fd fd84 	bl	8000a60 <__aeabi_dcmpgt>
 8002f58:	b120      	cbz	r0, 8002f64 <ceil+0x3c>
 8002f5a:	2c00      	cmp	r4, #0
 8002f5c:	db4f      	blt.n	8002ffe <ceil+0xd6>
 8002f5e:	4325      	orrs	r5, r4
 8002f60:	d151      	bne.n	8003006 <ceil+0xde>
 8002f62:	462c      	mov	r4, r5
 8002f64:	4621      	mov	r1, r4
 8002f66:	4628      	mov	r0, r5
 8002f68:	e023      	b.n	8002fb2 <ceil+0x8a>
 8002f6a:	4f2b      	ldr	r7, [pc, #172]	@ (8003018 <ceil+0xf0>)
 8002f6c:	4137      	asrs	r7, r6
 8002f6e:	ea01 0307 	and.w	r3, r1, r7
 8002f72:	4303      	orrs	r3, r0
 8002f74:	d01d      	beq.n	8002fb2 <ceil+0x8a>
 8002f76:	a326      	add	r3, pc, #152	@ (adr r3, 8003010 <ceil+0xe8>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f7fd f92a 	bl	80001d4 <__adddf3>
 8002f80:	2200      	movs	r2, #0
 8002f82:	2300      	movs	r3, #0
 8002f84:	f7fd fd6c 	bl	8000a60 <__aeabi_dcmpgt>
 8002f88:	2800      	cmp	r0, #0
 8002f8a:	d0eb      	beq.n	8002f64 <ceil+0x3c>
 8002f8c:	2c00      	cmp	r4, #0
 8002f8e:	bfc2      	ittt	gt
 8002f90:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8002f94:	4133      	asrgt	r3, r6
 8002f96:	18e4      	addgt	r4, r4, r3
 8002f98:	ea24 0407 	bic.w	r4, r4, r7
 8002f9c:	2500      	movs	r5, #0
 8002f9e:	e7e1      	b.n	8002f64 <ceil+0x3c>
 8002fa0:	2e33      	cmp	r6, #51	@ 0x33
 8002fa2:	dd0a      	ble.n	8002fba <ceil+0x92>
 8002fa4:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8002fa8:	d103      	bne.n	8002fb2 <ceil+0x8a>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	f7fd f911 	bl	80001d4 <__adddf3>
 8002fb2:	ec41 0b10 	vmov	d0, r0, r1
 8002fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fba:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8002fbe:	f04f 37ff 	mov.w	r7, #4294967295
 8002fc2:	40df      	lsrs	r7, r3
 8002fc4:	4238      	tst	r0, r7
 8002fc6:	d0f4      	beq.n	8002fb2 <ceil+0x8a>
 8002fc8:	a311      	add	r3, pc, #68	@ (adr r3, 8003010 <ceil+0xe8>)
 8002fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fce:	f7fd f901 	bl	80001d4 <__adddf3>
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f7fd fd43 	bl	8000a60 <__aeabi_dcmpgt>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d0c2      	beq.n	8002f64 <ceil+0x3c>
 8002fde:	2c00      	cmp	r4, #0
 8002fe0:	dd0a      	ble.n	8002ff8 <ceil+0xd0>
 8002fe2:	2e14      	cmp	r6, #20
 8002fe4:	d101      	bne.n	8002fea <ceil+0xc2>
 8002fe6:	3401      	adds	r4, #1
 8002fe8:	e006      	b.n	8002ff8 <ceil+0xd0>
 8002fea:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8002fee:	2301      	movs	r3, #1
 8002ff0:	40b3      	lsls	r3, r6
 8002ff2:	441d      	add	r5, r3
 8002ff4:	45a8      	cmp	r8, r5
 8002ff6:	d8f6      	bhi.n	8002fe6 <ceil+0xbe>
 8002ff8:	ea25 0507 	bic.w	r5, r5, r7
 8002ffc:	e7b2      	b.n	8002f64 <ceil+0x3c>
 8002ffe:	2500      	movs	r5, #0
 8003000:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003004:	e7ae      	b.n	8002f64 <ceil+0x3c>
 8003006:	4c05      	ldr	r4, [pc, #20]	@ (800301c <ceil+0xf4>)
 8003008:	2500      	movs	r5, #0
 800300a:	e7ab      	b.n	8002f64 <ceil+0x3c>
 800300c:	f3af 8000 	nop.w
 8003010:	8800759c 	.word	0x8800759c
 8003014:	7e37e43c 	.word	0x7e37e43c
 8003018:	000fffff 	.word	0x000fffff
 800301c:	3ff00000 	.word	0x3ff00000

08003020 <_init>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr

0800302c <_fini>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr
